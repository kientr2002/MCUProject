
Assignment.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002bb4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08002cc0  08002cc0  00012cc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002ce0  08002ce0  00020048  2**0
                  CONTENTS
  4 .ARM          00000000  08002ce0  08002ce0  00020048  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002ce0  08002ce0  00020048  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002ce0  08002ce0  00012ce0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002ce4  08002ce4  00012ce4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000048  20000000  08002ce8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e0  20000048  08002d30  00020048  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000128  08002d30  00020128  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009e0e  00000000  00000000  00020071  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e94  00000000  00000000  00029e7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b38  00000000  00000000  0002bd18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009e8  00000000  00000000  0002c850  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017975  00000000  00000000  0002d238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000da74  00000000  00000000  00044bad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008457a  00000000  00000000  00052621  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d6b9b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ab0  00000000  00000000  000d6bf0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000048 	.word	0x20000048
 8000128:	00000000 	.word	0x00000000
 800012c:	08002ca8 	.word	0x08002ca8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000004c 	.word	0x2000004c
 8000148:	08002ca8 	.word	0x08002ca8

0800014c <auto_fsm_run>:
 *  Created on: Nov 30, 2022
 *      Author: 84336
 */
#include "auto_fsm.h"

void auto_fsm_run() {
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	switch (status) {
 8000150:	4b3a      	ldr	r3, [pc, #232]	; (800023c <auto_fsm_run+0xf0>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	3b01      	subs	r3, #1
 8000156:	2b03      	cmp	r3, #3
 8000158:	d866      	bhi.n	8000228 <auto_fsm_run+0xdc>
 800015a:	a201      	add	r2, pc, #4	; (adr r2, 8000160 <auto_fsm_run+0x14>)
 800015c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000160:	08000171 	.word	0x08000171
 8000164:	08000181 	.word	0x08000181
 8000168:	080001b9 	.word	0x080001b9
 800016c:	080001f1 	.word	0x080001f1

	case INIT:
		status = AUTO_RED;
 8000170:	4b32      	ldr	r3, [pc, #200]	; (800023c <auto_fsm_run+0xf0>)
 8000172:	2202      	movs	r2, #2
 8000174:	601a      	str	r2, [r3, #0]
		SetTimer1(5000);
 8000176:	f241 3088 	movw	r0, #5000	; 0x1388
 800017a:	f000 fc45 	bl	8000a08 <SetTimer1>
		break;
 800017e:	e05a      	b.n	8000236 <auto_fsm_run+0xea>

	case AUTO_RED:
		RED_1();
 8000180:	f000 fde0 	bl	8000d44 <RED_1>
		GREEN_2();
 8000184:	f000 fe3a 	bl	8000dfc <GREEN_2>
		if (timer1_flag == 1) {
 8000188:	4b2d      	ldr	r3, [pc, #180]	; (8000240 <auto_fsm_run+0xf4>)
 800018a:	681b      	ldr	r3, [r3, #0]
 800018c:	2b01      	cmp	r3, #1
 800018e:	d106      	bne.n	800019e <auto_fsm_run+0x52>
			status = AUTO_GREEN;
 8000190:	4b2a      	ldr	r3, [pc, #168]	; (800023c <auto_fsm_run+0xf0>)
 8000192:	2204      	movs	r2, #4
 8000194:	601a      	str	r2, [r3, #0]
			SetTimer1(3000);
 8000196:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800019a:	f000 fc35 	bl	8000a08 <SetTimer1>
		}
		if (Button1_Is_Pressed() == 1) {
 800019e:	f000 f875 	bl	800028c <Button1_Is_Pressed>
 80001a2:	4603      	mov	r3, r0
 80001a4:	2b01      	cmp	r3, #1
 80001a6:	d141      	bne.n	800022c <auto_fsm_run+0xe0>
			status = MAN_GREEN;
 80001a8:	4b24      	ldr	r3, [pc, #144]	; (800023c <auto_fsm_run+0xf0>)
 80001aa:	220e      	movs	r2, #14
 80001ac:	601a      	str	r2, [r3, #0]
			SetTimer1(3000);
 80001ae:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80001b2:	f000 fc29 	bl	8000a08 <SetTimer1>
		}
		break;
 80001b6:	e039      	b.n	800022c <auto_fsm_run+0xe0>

	case AUTO_YELLOW:
		YELLOW_1();
 80001b8:	f000 fdd8 	bl	8000d6c <YELLOW_1>
		RED_2();
 80001bc:	f000 fdfe 	bl	8000dbc <RED_2>
		if (timer1_flag == 1) {
 80001c0:	4b1f      	ldr	r3, [pc, #124]	; (8000240 <auto_fsm_run+0xf4>)
 80001c2:	681b      	ldr	r3, [r3, #0]
 80001c4:	2b01      	cmp	r3, #1
 80001c6:	d106      	bne.n	80001d6 <auto_fsm_run+0x8a>
			status = AUTO_RED;
 80001c8:	4b1c      	ldr	r3, [pc, #112]	; (800023c <auto_fsm_run+0xf0>)
 80001ca:	2202      	movs	r2, #2
 80001cc:	601a      	str	r2, [r3, #0]
			SetTimer1(5000);
 80001ce:	f241 3088 	movw	r0, #5000	; 0x1388
 80001d2:	f000 fc19 	bl	8000a08 <SetTimer1>
		}

		if (Button1_Is_Pressed() == 1) {
 80001d6:	f000 f859 	bl	800028c <Button1_Is_Pressed>
 80001da:	4603      	mov	r3, r0
 80001dc:	2b01      	cmp	r3, #1
 80001de:	d127      	bne.n	8000230 <auto_fsm_run+0xe4>
			status = MAN_RED;
 80001e0:	4b16      	ldr	r3, [pc, #88]	; (800023c <auto_fsm_run+0xf0>)
 80001e2:	220c      	movs	r2, #12
 80001e4:	601a      	str	r2, [r3, #0]
			SetTimer1(5000);
 80001e6:	f241 3088 	movw	r0, #5000	; 0x1388
 80001ea:	f000 fc0d 	bl	8000a08 <SetTimer1>
		}
		break;
 80001ee:	e01f      	b.n	8000230 <auto_fsm_run+0xe4>

	case AUTO_GREEN:
		GREEN_1();
 80001f0:	f000 fdd0 	bl	8000d94 <GREEN_1>
		YELLOW_2();
 80001f4:	f000 fdf2 	bl	8000ddc <YELLOW_2>
		if (timer1_flag == 1) {
 80001f8:	4b11      	ldr	r3, [pc, #68]	; (8000240 <auto_fsm_run+0xf4>)
 80001fa:	681b      	ldr	r3, [r3, #0]
 80001fc:	2b01      	cmp	r3, #1
 80001fe:	d106      	bne.n	800020e <auto_fsm_run+0xc2>
			status = AUTO_YELLOW;
 8000200:	4b0e      	ldr	r3, [pc, #56]	; (800023c <auto_fsm_run+0xf0>)
 8000202:	2203      	movs	r2, #3
 8000204:	601a      	str	r2, [r3, #0]
			SetTimer1(2000);
 8000206:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800020a:	f000 fbfd 	bl	8000a08 <SetTimer1>
		}
		if (Button1_Is_Pressed() == 1) {
 800020e:	f000 f83d 	bl	800028c <Button1_Is_Pressed>
 8000212:	4603      	mov	r3, r0
 8000214:	2b01      	cmp	r3, #1
 8000216:	d10d      	bne.n	8000234 <auto_fsm_run+0xe8>
			status = MAN_YELLOW;
 8000218:	4b08      	ldr	r3, [pc, #32]	; (800023c <auto_fsm_run+0xf0>)
 800021a:	220d      	movs	r2, #13
 800021c:	601a      	str	r2, [r3, #0]
			SetTimer1(2000);
 800021e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000222:	f000 fbf1 	bl	8000a08 <SetTimer1>
		}
		break;
 8000226:	e005      	b.n	8000234 <auto_fsm_run+0xe8>

	default:
		break;
 8000228:	bf00      	nop
 800022a:	e004      	b.n	8000236 <auto_fsm_run+0xea>
		break;
 800022c:	bf00      	nop
 800022e:	e002      	b.n	8000236 <auto_fsm_run+0xea>
		break;
 8000230:	bf00      	nop
 8000232:	e000      	b.n	8000236 <auto_fsm_run+0xea>
		break;
 8000234:	bf00      	nop
	}
}
 8000236:	bf00      	nop
 8000238:	bd80      	pop	{r7, pc}
 800023a:	bf00      	nop
 800023c:	20000070 	.word	0x20000070
 8000240:	20000074 	.word	0x20000074

08000244 <SubKeyProcess1>:
int KeyReg9 = NORMAL_STATE;
int KeyReg10 = NORMAL_STATE;
int KeyReg11 = NORMAL_STATE;
int TimerForKeyPress3 = 100;

void SubKeyProcess1() {
 8000244:	b480      	push	{r7}
 8000246:	af00      	add	r7, sp, #0
	button1_flag = 1;
 8000248:	4b03      	ldr	r3, [pc, #12]	; (8000258 <SubKeyProcess1+0x14>)
 800024a:	2201      	movs	r2, #1
 800024c:	601a      	str	r2, [r3, #0]
}
 800024e:	bf00      	nop
 8000250:	46bd      	mov	sp, r7
 8000252:	bc80      	pop	{r7}
 8000254:	4770      	bx	lr
 8000256:	bf00      	nop
 8000258:	20000064 	.word	0x20000064

0800025c <SubKeyProcess2>:

void SubKeyProcess2() {
 800025c:	b480      	push	{r7}
 800025e:	af00      	add	r7, sp, #0
	button2_flag = 1;
 8000260:	4b03      	ldr	r3, [pc, #12]	; (8000270 <SubKeyProcess2+0x14>)
 8000262:	2201      	movs	r2, #1
 8000264:	601a      	str	r2, [r3, #0]
}
 8000266:	bf00      	nop
 8000268:	46bd      	mov	sp, r7
 800026a:	bc80      	pop	{r7}
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop
 8000270:	20000068 	.word	0x20000068

08000274 <SubKeyProcess3>:

void SubKeyProcess3() {
 8000274:	b480      	push	{r7}
 8000276:	af00      	add	r7, sp, #0
	button3_flag = 1;
 8000278:	4b03      	ldr	r3, [pc, #12]	; (8000288 <SubKeyProcess3+0x14>)
 800027a:	2201      	movs	r2, #1
 800027c:	601a      	str	r2, [r3, #0]
}
 800027e:	bf00      	nop
 8000280:	46bd      	mov	sp, r7
 8000282:	bc80      	pop	{r7}
 8000284:	4770      	bx	lr
 8000286:	bf00      	nop
 8000288:	2000006c 	.word	0x2000006c

0800028c <Button1_Is_Pressed>:

int Button1_Is_Pressed () {
 800028c:	b480      	push	{r7}
 800028e:	af00      	add	r7, sp, #0
	if (button1_flag == 1) {
 8000290:	4b06      	ldr	r3, [pc, #24]	; (80002ac <Button1_Is_Pressed+0x20>)
 8000292:	681b      	ldr	r3, [r3, #0]
 8000294:	2b01      	cmp	r3, #1
 8000296:	d104      	bne.n	80002a2 <Button1_Is_Pressed+0x16>
		button1_flag = 0;
 8000298:	4b04      	ldr	r3, [pc, #16]	; (80002ac <Button1_Is_Pressed+0x20>)
 800029a:	2200      	movs	r2, #0
 800029c:	601a      	str	r2, [r3, #0]
		return 1;
 800029e:	2301      	movs	r3, #1
 80002a0:	e000      	b.n	80002a4 <Button1_Is_Pressed+0x18>
	}
	return 0;
 80002a2:	2300      	movs	r3, #0
}
 80002a4:	4618      	mov	r0, r3
 80002a6:	46bd      	mov	sp, r7
 80002a8:	bc80      	pop	{r7}
 80002aa:	4770      	bx	lr
 80002ac:	20000064 	.word	0x20000064

080002b0 <Button2_Is_Pressed>:

int Button2_Is_Pressed () {
 80002b0:	b480      	push	{r7}
 80002b2:	af00      	add	r7, sp, #0
	if (button2_flag == 1) {
 80002b4:	4b06      	ldr	r3, [pc, #24]	; (80002d0 <Button2_Is_Pressed+0x20>)
 80002b6:	681b      	ldr	r3, [r3, #0]
 80002b8:	2b01      	cmp	r3, #1
 80002ba:	d104      	bne.n	80002c6 <Button2_Is_Pressed+0x16>
		button2_flag = 0;
 80002bc:	4b04      	ldr	r3, [pc, #16]	; (80002d0 <Button2_Is_Pressed+0x20>)
 80002be:	2200      	movs	r2, #0
 80002c0:	601a      	str	r2, [r3, #0]
		return 1;
 80002c2:	2301      	movs	r3, #1
 80002c4:	e000      	b.n	80002c8 <Button2_Is_Pressed+0x18>
	}
	return 0;
 80002c6:	2300      	movs	r3, #0
}
 80002c8:	4618      	mov	r0, r3
 80002ca:	46bd      	mov	sp, r7
 80002cc:	bc80      	pop	{r7}
 80002ce:	4770      	bx	lr
 80002d0:	20000068 	.word	0x20000068

080002d4 <Button3_Is_Pressed>:

int Button3_Is_Pressed () {
 80002d4:	b480      	push	{r7}
 80002d6:	af00      	add	r7, sp, #0
	if (button3_flag == 1) {
 80002d8:	4b06      	ldr	r3, [pc, #24]	; (80002f4 <Button3_Is_Pressed+0x20>)
 80002da:	681b      	ldr	r3, [r3, #0]
 80002dc:	2b01      	cmp	r3, #1
 80002de:	d104      	bne.n	80002ea <Button3_Is_Pressed+0x16>
		button3_flag = 0;
 80002e0:	4b04      	ldr	r3, [pc, #16]	; (80002f4 <Button3_Is_Pressed+0x20>)
 80002e2:	2200      	movs	r2, #0
 80002e4:	601a      	str	r2, [r3, #0]
		return 1;
 80002e6:	2301      	movs	r3, #1
 80002e8:	e000      	b.n	80002ec <Button3_Is_Pressed+0x18>
	}
	return 0;
 80002ea:	2300      	movs	r3, #0
}
 80002ec:	4618      	mov	r0, r3
 80002ee:	46bd      	mov	sp, r7
 80002f0:	bc80      	pop	{r7}
 80002f2:	4770      	bx	lr
 80002f4:	2000006c 	.word	0x2000006c

080002f8 <GetKeyInput1>:

void GetKeyInput1() {
 80002f8:	b580      	push	{r7, lr}
 80002fa:	af00      	add	r7, sp, #0
	KeyReg0 = KeyReg1;
 80002fc:	4b1e      	ldr	r3, [pc, #120]	; (8000378 <GetKeyInput1+0x80>)
 80002fe:	681b      	ldr	r3, [r3, #0]
 8000300:	4a1e      	ldr	r2, [pc, #120]	; (800037c <GetKeyInput1+0x84>)
 8000302:	6013      	str	r3, [r2, #0]
	KeyReg1 = KeyReg2;
 8000304:	4b1e      	ldr	r3, [pc, #120]	; (8000380 <GetKeyInput1+0x88>)
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	4a1b      	ldr	r2, [pc, #108]	; (8000378 <GetKeyInput1+0x80>)
 800030a:	6013      	str	r3, [r2, #0]
	KeyReg2 = HAL_GPIO_ReadPin(A1_GPIO_Port, A1_Pin);
 800030c:	2102      	movs	r1, #2
 800030e:	481d      	ldr	r0, [pc, #116]	; (8000384 <GetKeyInput1+0x8c>)
 8000310:	f001 f934 	bl	800157c <HAL_GPIO_ReadPin>
 8000314:	4603      	mov	r3, r0
 8000316:	461a      	mov	r2, r3
 8000318:	4b19      	ldr	r3, [pc, #100]	; (8000380 <GetKeyInput1+0x88>)
 800031a:	601a      	str	r2, [r3, #0]
	if ((KeyReg0 == KeyReg1) && (KeyReg1 == KeyReg2)) {
 800031c:	4b17      	ldr	r3, [pc, #92]	; (800037c <GetKeyInput1+0x84>)
 800031e:	681a      	ldr	r2, [r3, #0]
 8000320:	4b15      	ldr	r3, [pc, #84]	; (8000378 <GetKeyInput1+0x80>)
 8000322:	681b      	ldr	r3, [r3, #0]
 8000324:	429a      	cmp	r2, r3
 8000326:	d125      	bne.n	8000374 <GetKeyInput1+0x7c>
 8000328:	4b13      	ldr	r3, [pc, #76]	; (8000378 <GetKeyInput1+0x80>)
 800032a:	681a      	ldr	r2, [r3, #0]
 800032c:	4b14      	ldr	r3, [pc, #80]	; (8000380 <GetKeyInput1+0x88>)
 800032e:	681b      	ldr	r3, [r3, #0]
 8000330:	429a      	cmp	r2, r3
 8000332:	d11f      	bne.n	8000374 <GetKeyInput1+0x7c>
		if (KeyReg3 != KeyReg2) {
 8000334:	4b14      	ldr	r3, [pc, #80]	; (8000388 <GetKeyInput1+0x90>)
 8000336:	681a      	ldr	r2, [r3, #0]
 8000338:	4b11      	ldr	r3, [pc, #68]	; (8000380 <GetKeyInput1+0x88>)
 800033a:	681b      	ldr	r3, [r3, #0]
 800033c:	429a      	cmp	r2, r3
 800033e:	d00d      	beq.n	800035c <GetKeyInput1+0x64>
			KeyReg3 = KeyReg2;
 8000340:	4b0f      	ldr	r3, [pc, #60]	; (8000380 <GetKeyInput1+0x88>)
 8000342:	681b      	ldr	r3, [r3, #0]
 8000344:	4a10      	ldr	r2, [pc, #64]	; (8000388 <GetKeyInput1+0x90>)
 8000346:	6013      	str	r3, [r2, #0]
			if (KeyReg2 == PRESSED_STATE) {
 8000348:	4b0d      	ldr	r3, [pc, #52]	; (8000380 <GetKeyInput1+0x88>)
 800034a:	681b      	ldr	r3, [r3, #0]
 800034c:	2b00      	cmp	r3, #0
 800034e:	d111      	bne.n	8000374 <GetKeyInput1+0x7c>
				SubKeyProcess1();
 8000350:	f7ff ff78 	bl	8000244 <SubKeyProcess1>
				TimerForKeyPress1 = 100;
 8000354:	4b0d      	ldr	r3, [pc, #52]	; (800038c <GetKeyInput1+0x94>)
 8000356:	2264      	movs	r2, #100	; 0x64
 8000358:	601a      	str	r2, [r3, #0]
			if (TimerForKeyPress1 == 0) {
				KeyReg3 = NORMAL_STATE;
			}
		}
	}
}
 800035a:	e00b      	b.n	8000374 <GetKeyInput1+0x7c>
			TimerForKeyPress1--;
 800035c:	4b0b      	ldr	r3, [pc, #44]	; (800038c <GetKeyInput1+0x94>)
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	3b01      	subs	r3, #1
 8000362:	4a0a      	ldr	r2, [pc, #40]	; (800038c <GetKeyInput1+0x94>)
 8000364:	6013      	str	r3, [r2, #0]
			if (TimerForKeyPress1 == 0) {
 8000366:	4b09      	ldr	r3, [pc, #36]	; (800038c <GetKeyInput1+0x94>)
 8000368:	681b      	ldr	r3, [r3, #0]
 800036a:	2b00      	cmp	r3, #0
 800036c:	d102      	bne.n	8000374 <GetKeyInput1+0x7c>
				KeyReg3 = NORMAL_STATE;
 800036e:	4b06      	ldr	r3, [pc, #24]	; (8000388 <GetKeyInput1+0x90>)
 8000370:	2201      	movs	r2, #1
 8000372:	601a      	str	r2, [r3, #0]
}
 8000374:	bf00      	nop
 8000376:	bd80      	pop	{r7, pc}
 8000378:	20000004 	.word	0x20000004
 800037c:	20000000 	.word	0x20000000
 8000380:	20000008 	.word	0x20000008
 8000384:	40010800 	.word	0x40010800
 8000388:	2000000c 	.word	0x2000000c
 800038c:	20000010 	.word	0x20000010

08000390 <GetKeyInput2>:

void GetKeyInput2() {
 8000390:	b580      	push	{r7, lr}
 8000392:	af00      	add	r7, sp, #0
	KeyReg4 = KeyReg5;
 8000394:	4b1e      	ldr	r3, [pc, #120]	; (8000410 <GetKeyInput2+0x80>)
 8000396:	681b      	ldr	r3, [r3, #0]
 8000398:	4a1e      	ldr	r2, [pc, #120]	; (8000414 <GetKeyInput2+0x84>)
 800039a:	6013      	str	r3, [r2, #0]
	KeyReg5 = KeyReg6;
 800039c:	4b1e      	ldr	r3, [pc, #120]	; (8000418 <GetKeyInput2+0x88>)
 800039e:	681b      	ldr	r3, [r3, #0]
 80003a0:	4a1b      	ldr	r2, [pc, #108]	; (8000410 <GetKeyInput2+0x80>)
 80003a2:	6013      	str	r3, [r2, #0]
	KeyReg6 = HAL_GPIO_ReadPin(A2_GPIO_Port, A2_Pin);
 80003a4:	2110      	movs	r1, #16
 80003a6:	481d      	ldr	r0, [pc, #116]	; (800041c <GetKeyInput2+0x8c>)
 80003a8:	f001 f8e8 	bl	800157c <HAL_GPIO_ReadPin>
 80003ac:	4603      	mov	r3, r0
 80003ae:	461a      	mov	r2, r3
 80003b0:	4b19      	ldr	r3, [pc, #100]	; (8000418 <GetKeyInput2+0x88>)
 80003b2:	601a      	str	r2, [r3, #0]
	if ((KeyReg4 == KeyReg5) && (KeyReg5 == KeyReg6)) {
 80003b4:	4b17      	ldr	r3, [pc, #92]	; (8000414 <GetKeyInput2+0x84>)
 80003b6:	681a      	ldr	r2, [r3, #0]
 80003b8:	4b15      	ldr	r3, [pc, #84]	; (8000410 <GetKeyInput2+0x80>)
 80003ba:	681b      	ldr	r3, [r3, #0]
 80003bc:	429a      	cmp	r2, r3
 80003be:	d125      	bne.n	800040c <GetKeyInput2+0x7c>
 80003c0:	4b13      	ldr	r3, [pc, #76]	; (8000410 <GetKeyInput2+0x80>)
 80003c2:	681a      	ldr	r2, [r3, #0]
 80003c4:	4b14      	ldr	r3, [pc, #80]	; (8000418 <GetKeyInput2+0x88>)
 80003c6:	681b      	ldr	r3, [r3, #0]
 80003c8:	429a      	cmp	r2, r3
 80003ca:	d11f      	bne.n	800040c <GetKeyInput2+0x7c>
		if (KeyReg7 != KeyReg6) {
 80003cc:	4b14      	ldr	r3, [pc, #80]	; (8000420 <GetKeyInput2+0x90>)
 80003ce:	681a      	ldr	r2, [r3, #0]
 80003d0:	4b11      	ldr	r3, [pc, #68]	; (8000418 <GetKeyInput2+0x88>)
 80003d2:	681b      	ldr	r3, [r3, #0]
 80003d4:	429a      	cmp	r2, r3
 80003d6:	d00d      	beq.n	80003f4 <GetKeyInput2+0x64>
			KeyReg7 = KeyReg6;
 80003d8:	4b0f      	ldr	r3, [pc, #60]	; (8000418 <GetKeyInput2+0x88>)
 80003da:	681b      	ldr	r3, [r3, #0]
 80003dc:	4a10      	ldr	r2, [pc, #64]	; (8000420 <GetKeyInput2+0x90>)
 80003de:	6013      	str	r3, [r2, #0]
			if (KeyReg6 == PRESSED_STATE) {
 80003e0:	4b0d      	ldr	r3, [pc, #52]	; (8000418 <GetKeyInput2+0x88>)
 80003e2:	681b      	ldr	r3, [r3, #0]
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	d111      	bne.n	800040c <GetKeyInput2+0x7c>
				SubKeyProcess2();
 80003e8:	f7ff ff38 	bl	800025c <SubKeyProcess2>
				TimerForKeyPress2 = 100;
 80003ec:	4b0d      	ldr	r3, [pc, #52]	; (8000424 <GetKeyInput2+0x94>)
 80003ee:	2264      	movs	r2, #100	; 0x64
 80003f0:	601a      	str	r2, [r3, #0]
			if (TimerForKeyPress2 == 0) {
				KeyReg7 = NORMAL_STATE;
			}
		}
	}
}
 80003f2:	e00b      	b.n	800040c <GetKeyInput2+0x7c>
			TimerForKeyPress2--;
 80003f4:	4b0b      	ldr	r3, [pc, #44]	; (8000424 <GetKeyInput2+0x94>)
 80003f6:	681b      	ldr	r3, [r3, #0]
 80003f8:	3b01      	subs	r3, #1
 80003fa:	4a0a      	ldr	r2, [pc, #40]	; (8000424 <GetKeyInput2+0x94>)
 80003fc:	6013      	str	r3, [r2, #0]
			if (TimerForKeyPress2 == 0) {
 80003fe:	4b09      	ldr	r3, [pc, #36]	; (8000424 <GetKeyInput2+0x94>)
 8000400:	681b      	ldr	r3, [r3, #0]
 8000402:	2b00      	cmp	r3, #0
 8000404:	d102      	bne.n	800040c <GetKeyInput2+0x7c>
				KeyReg7 = NORMAL_STATE;
 8000406:	4b06      	ldr	r3, [pc, #24]	; (8000420 <GetKeyInput2+0x90>)
 8000408:	2201      	movs	r2, #1
 800040a:	601a      	str	r2, [r3, #0]
}
 800040c:	bf00      	nop
 800040e:	bd80      	pop	{r7, pc}
 8000410:	20000018 	.word	0x20000018
 8000414:	20000014 	.word	0x20000014
 8000418:	2000001c 	.word	0x2000001c
 800041c:	40010800 	.word	0x40010800
 8000420:	20000020 	.word	0x20000020
 8000424:	20000024 	.word	0x20000024

08000428 <GetKeyInput3>:

void GetKeyInput3() {
 8000428:	b580      	push	{r7, lr}
 800042a:	af00      	add	r7, sp, #0
	KeyReg8 = KeyReg9;
 800042c:	4b1e      	ldr	r3, [pc, #120]	; (80004a8 <GetKeyInput3+0x80>)
 800042e:	681b      	ldr	r3, [r3, #0]
 8000430:	4a1e      	ldr	r2, [pc, #120]	; (80004ac <GetKeyInput3+0x84>)
 8000432:	6013      	str	r3, [r2, #0]
	KeyReg9 = KeyReg10;
 8000434:	4b1e      	ldr	r3, [pc, #120]	; (80004b0 <GetKeyInput3+0x88>)
 8000436:	681b      	ldr	r3, [r3, #0]
 8000438:	4a1b      	ldr	r2, [pc, #108]	; (80004a8 <GetKeyInput3+0x80>)
 800043a:	6013      	str	r3, [r2, #0]
	KeyReg10 = HAL_GPIO_ReadPin(A0_GPIO_Port, A0_Pin);
 800043c:	2101      	movs	r1, #1
 800043e:	481d      	ldr	r0, [pc, #116]	; (80004b4 <GetKeyInput3+0x8c>)
 8000440:	f001 f89c 	bl	800157c <HAL_GPIO_ReadPin>
 8000444:	4603      	mov	r3, r0
 8000446:	461a      	mov	r2, r3
 8000448:	4b19      	ldr	r3, [pc, #100]	; (80004b0 <GetKeyInput3+0x88>)
 800044a:	601a      	str	r2, [r3, #0]
	if ((KeyReg8 == KeyReg9) && (KeyReg9 == KeyReg10)) {
 800044c:	4b17      	ldr	r3, [pc, #92]	; (80004ac <GetKeyInput3+0x84>)
 800044e:	681a      	ldr	r2, [r3, #0]
 8000450:	4b15      	ldr	r3, [pc, #84]	; (80004a8 <GetKeyInput3+0x80>)
 8000452:	681b      	ldr	r3, [r3, #0]
 8000454:	429a      	cmp	r2, r3
 8000456:	d125      	bne.n	80004a4 <GetKeyInput3+0x7c>
 8000458:	4b13      	ldr	r3, [pc, #76]	; (80004a8 <GetKeyInput3+0x80>)
 800045a:	681a      	ldr	r2, [r3, #0]
 800045c:	4b14      	ldr	r3, [pc, #80]	; (80004b0 <GetKeyInput3+0x88>)
 800045e:	681b      	ldr	r3, [r3, #0]
 8000460:	429a      	cmp	r2, r3
 8000462:	d11f      	bne.n	80004a4 <GetKeyInput3+0x7c>
		if (KeyReg11 != KeyReg10) {
 8000464:	4b14      	ldr	r3, [pc, #80]	; (80004b8 <GetKeyInput3+0x90>)
 8000466:	681a      	ldr	r2, [r3, #0]
 8000468:	4b11      	ldr	r3, [pc, #68]	; (80004b0 <GetKeyInput3+0x88>)
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	429a      	cmp	r2, r3
 800046e:	d00d      	beq.n	800048c <GetKeyInput3+0x64>
			KeyReg11 = KeyReg10;
 8000470:	4b0f      	ldr	r3, [pc, #60]	; (80004b0 <GetKeyInput3+0x88>)
 8000472:	681b      	ldr	r3, [r3, #0]
 8000474:	4a10      	ldr	r2, [pc, #64]	; (80004b8 <GetKeyInput3+0x90>)
 8000476:	6013      	str	r3, [r2, #0]
			if (KeyReg10 == PRESSED_STATE) {
 8000478:	4b0d      	ldr	r3, [pc, #52]	; (80004b0 <GetKeyInput3+0x88>)
 800047a:	681b      	ldr	r3, [r3, #0]
 800047c:	2b00      	cmp	r3, #0
 800047e:	d111      	bne.n	80004a4 <GetKeyInput3+0x7c>
				SubKeyProcess3();
 8000480:	f7ff fef8 	bl	8000274 <SubKeyProcess3>
				TimerForKeyPress3 = 100;
 8000484:	4b0d      	ldr	r3, [pc, #52]	; (80004bc <GetKeyInput3+0x94>)
 8000486:	2264      	movs	r2, #100	; 0x64
 8000488:	601a      	str	r2, [r3, #0]
			if (TimerForKeyPress3 == 0) {
				KeyReg11 = NORMAL_STATE;
			}
		}
	}
}
 800048a:	e00b      	b.n	80004a4 <GetKeyInput3+0x7c>
			TimerForKeyPress3--;
 800048c:	4b0b      	ldr	r3, [pc, #44]	; (80004bc <GetKeyInput3+0x94>)
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	3b01      	subs	r3, #1
 8000492:	4a0a      	ldr	r2, [pc, #40]	; (80004bc <GetKeyInput3+0x94>)
 8000494:	6013      	str	r3, [r2, #0]
			if (TimerForKeyPress3 == 0) {
 8000496:	4b09      	ldr	r3, [pc, #36]	; (80004bc <GetKeyInput3+0x94>)
 8000498:	681b      	ldr	r3, [r3, #0]
 800049a:	2b00      	cmp	r3, #0
 800049c:	d102      	bne.n	80004a4 <GetKeyInput3+0x7c>
				KeyReg11 = NORMAL_STATE;
 800049e:	4b06      	ldr	r3, [pc, #24]	; (80004b8 <GetKeyInput3+0x90>)
 80004a0:	2201      	movs	r2, #1
 80004a2:	601a      	str	r2, [r3, #0]
}
 80004a4:	bf00      	nop
 80004a6:	bd80      	pop	{r7, pc}
 80004a8:	2000002c 	.word	0x2000002c
 80004ac:	20000028 	.word	0x20000028
 80004b0:	20000030 	.word	0x20000030
 80004b4:	40010800 	.word	0x40010800
 80004b8:	20000034 	.word	0x20000034
 80004bc:	20000038 	.word	0x20000038

080004c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c4:	f000 fd66 	bl	8000f94 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c8:	f000 f820 	bl	800050c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004cc:	f000 f906 	bl	80006dc <MX_GPIO_Init>
  MX_TIM2_Init();
 80004d0:	f000 f85e 	bl	8000590 <MX_TIM2_Init>
  MX_TIM3_Init();
 80004d4:	f000 f8a8 	bl	8000628 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  //HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
  HAL_TIM_Base_Start_IT(&htim2);
 80004d8:	4809      	ldr	r0, [pc, #36]	; (8000500 <main+0x40>)
 80004da:	f001 fcb7 	bl	8001e4c <HAL_TIM_Base_Start_IT>
  HAL_TIMEx_PWMN_Start(&htim3, TIM_CHANNEL_1);
 80004de:	2100      	movs	r1, #0
 80004e0:	4808      	ldr	r0, [pc, #32]	; (8000504 <main+0x44>)
 80004e2:	f002 fa83 	bl	80029ec <HAL_TIMEx_PWMN_Start>
//  htim3.Instance->CCR1 = 0;
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  status = INIT;
 80004e6:	4b08      	ldr	r3, [pc, #32]	; (8000508 <main+0x48>)
 80004e8:	2201      	movs	r2, #1
 80004ea:	601a      	str	r2, [r3, #0]
  while (1)
  {
	  auto_fsm_run();
 80004ec:	f7ff fe2e 	bl	800014c <auto_fsm_run>
	  man_fsm_run();
 80004f0:	f000 f984 	bl	80007fc <man_fsm_run>
	  tun_fsm_run();
 80004f4:	f000 fc92 	bl	8000e1c <tun_fsm_run>
	  ped_fsm_run();
 80004f8:	f000 fa50 	bl	800099c <ped_fsm_run>
	  auto_fsm_run();
 80004fc:	e7f6      	b.n	80004ec <main+0x2c>
 80004fe:	bf00      	nop
 8000500:	200000dc 	.word	0x200000dc
 8000504:	20000094 	.word	0x20000094
 8000508:	20000070 	.word	0x20000070

0800050c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b090      	sub	sp, #64	; 0x40
 8000510:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000512:	f107 0318 	add.w	r3, r7, #24
 8000516:	2228      	movs	r2, #40	; 0x28
 8000518:	2100      	movs	r1, #0
 800051a:	4618      	mov	r0, r3
 800051c:	f002 fbbc 	bl	8002c98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000520:	1d3b      	adds	r3, r7, #4
 8000522:	2200      	movs	r2, #0
 8000524:	601a      	str	r2, [r3, #0]
 8000526:	605a      	str	r2, [r3, #4]
 8000528:	609a      	str	r2, [r3, #8]
 800052a:	60da      	str	r2, [r3, #12]
 800052c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800052e:	2302      	movs	r3, #2
 8000530:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000532:	2301      	movs	r3, #1
 8000534:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000536:	2310      	movs	r3, #16
 8000538:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800053a:	2302      	movs	r3, #2
 800053c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800053e:	2300      	movs	r3, #0
 8000540:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000542:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000546:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000548:	f107 0318 	add.w	r3, r7, #24
 800054c:	4618      	mov	r0, r3
 800054e:	f001 f845 	bl	80015dc <HAL_RCC_OscConfig>
 8000552:	4603      	mov	r3, r0
 8000554:	2b00      	cmp	r3, #0
 8000556:	d001      	beq.n	800055c <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000558:	f000 f94a 	bl	80007f0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800055c:	230f      	movs	r3, #15
 800055e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000560:	2302      	movs	r3, #2
 8000562:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000564:	2300      	movs	r3, #0
 8000566:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000568:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800056c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800056e:	2300      	movs	r3, #0
 8000570:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000572:	1d3b      	adds	r3, r7, #4
 8000574:	2102      	movs	r1, #2
 8000576:	4618      	mov	r0, r3
 8000578:	f001 fab0 	bl	8001adc <HAL_RCC_ClockConfig>
 800057c:	4603      	mov	r3, r0
 800057e:	2b00      	cmp	r3, #0
 8000580:	d001      	beq.n	8000586 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000582:	f000 f935 	bl	80007f0 <Error_Handler>
  }
}
 8000586:	bf00      	nop
 8000588:	3740      	adds	r7, #64	; 0x40
 800058a:	46bd      	mov	sp, r7
 800058c:	bd80      	pop	{r7, pc}
	...

08000590 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b086      	sub	sp, #24
 8000594:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000596:	f107 0308 	add.w	r3, r7, #8
 800059a:	2200      	movs	r2, #0
 800059c:	601a      	str	r2, [r3, #0]
 800059e:	605a      	str	r2, [r3, #4]
 80005a0:	609a      	str	r2, [r3, #8]
 80005a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005a4:	463b      	mov	r3, r7
 80005a6:	2200      	movs	r2, #0
 80005a8:	601a      	str	r2, [r3, #0]
 80005aa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80005ac:	4b1d      	ldr	r3, [pc, #116]	; (8000624 <MX_TIM2_Init+0x94>)
 80005ae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80005b2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 63;
 80005b4:	4b1b      	ldr	r3, [pc, #108]	; (8000624 <MX_TIM2_Init+0x94>)
 80005b6:	223f      	movs	r2, #63	; 0x3f
 80005b8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005ba:	4b1a      	ldr	r3, [pc, #104]	; (8000624 <MX_TIM2_Init+0x94>)
 80005bc:	2200      	movs	r2, #0
 80005be:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9999;
 80005c0:	4b18      	ldr	r3, [pc, #96]	; (8000624 <MX_TIM2_Init+0x94>)
 80005c2:	f242 720f 	movw	r2, #9999	; 0x270f
 80005c6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005c8:	4b16      	ldr	r3, [pc, #88]	; (8000624 <MX_TIM2_Init+0x94>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005ce:	4b15      	ldr	r3, [pc, #84]	; (8000624 <MX_TIM2_Init+0x94>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80005d4:	4813      	ldr	r0, [pc, #76]	; (8000624 <MX_TIM2_Init+0x94>)
 80005d6:	f001 fbe9 	bl	8001dac <HAL_TIM_Base_Init>
 80005da:	4603      	mov	r3, r0
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d001      	beq.n	80005e4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80005e0:	f000 f906 	bl	80007f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80005e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005e8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80005ea:	f107 0308 	add.w	r3, r7, #8
 80005ee:	4619      	mov	r1, r3
 80005f0:	480c      	ldr	r0, [pc, #48]	; (8000624 <MX_TIM2_Init+0x94>)
 80005f2:	f001 fe93 	bl	800231c <HAL_TIM_ConfigClockSource>
 80005f6:	4603      	mov	r3, r0
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d001      	beq.n	8000600 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80005fc:	f000 f8f8 	bl	80007f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000600:	2300      	movs	r3, #0
 8000602:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000604:	2300      	movs	r3, #0
 8000606:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000608:	463b      	mov	r3, r7
 800060a:	4619      	mov	r1, r3
 800060c:	4805      	ldr	r0, [pc, #20]	; (8000624 <MX_TIM2_Init+0x94>)
 800060e:	f002 fa8b 	bl	8002b28 <HAL_TIMEx_MasterConfigSynchronization>
 8000612:	4603      	mov	r3, r0
 8000614:	2b00      	cmp	r3, #0
 8000616:	d001      	beq.n	800061c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000618:	f000 f8ea 	bl	80007f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800061c:	bf00      	nop
 800061e:	3718      	adds	r7, #24
 8000620:	46bd      	mov	sp, r7
 8000622:	bd80      	pop	{r7, pc}
 8000624:	200000dc 	.word	0x200000dc

08000628 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b08a      	sub	sp, #40	; 0x28
 800062c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800062e:	f107 0320 	add.w	r3, r7, #32
 8000632:	2200      	movs	r2, #0
 8000634:	601a      	str	r2, [r3, #0]
 8000636:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000638:	1d3b      	adds	r3, r7, #4
 800063a:	2200      	movs	r2, #0
 800063c:	601a      	str	r2, [r3, #0]
 800063e:	605a      	str	r2, [r3, #4]
 8000640:	609a      	str	r2, [r3, #8]
 8000642:	60da      	str	r2, [r3, #12]
 8000644:	611a      	str	r2, [r3, #16]
 8000646:	615a      	str	r2, [r3, #20]
 8000648:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800064a:	4b22      	ldr	r3, [pc, #136]	; (80006d4 <MX_TIM3_Init+0xac>)
 800064c:	4a22      	ldr	r2, [pc, #136]	; (80006d8 <MX_TIM3_Init+0xb0>)
 800064e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000650:	4b20      	ldr	r3, [pc, #128]	; (80006d4 <MX_TIM3_Init+0xac>)
 8000652:	2200      	movs	r2, #0
 8000654:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000656:	4b1f      	ldr	r3, [pc, #124]	; (80006d4 <MX_TIM3_Init+0xac>)
 8000658:	2200      	movs	r2, #0
 800065a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800065c:	4b1d      	ldr	r3, [pc, #116]	; (80006d4 <MX_TIM3_Init+0xac>)
 800065e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000662:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000664:	4b1b      	ldr	r3, [pc, #108]	; (80006d4 <MX_TIM3_Init+0xac>)
 8000666:	2200      	movs	r2, #0
 8000668:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800066a:	4b1a      	ldr	r3, [pc, #104]	; (80006d4 <MX_TIM3_Init+0xac>)
 800066c:	2200      	movs	r2, #0
 800066e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000670:	4818      	ldr	r0, [pc, #96]	; (80006d4 <MX_TIM3_Init+0xac>)
 8000672:	f001 fc3d 	bl	8001ef0 <HAL_TIM_PWM_Init>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d001      	beq.n	8000680 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 800067c:	f000 f8b8 	bl	80007f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000680:	2300      	movs	r3, #0
 8000682:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000684:	2300      	movs	r3, #0
 8000686:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000688:	f107 0320 	add.w	r3, r7, #32
 800068c:	4619      	mov	r1, r3
 800068e:	4811      	ldr	r0, [pc, #68]	; (80006d4 <MX_TIM3_Init+0xac>)
 8000690:	f002 fa4a 	bl	8002b28 <HAL_TIMEx_MasterConfigSynchronization>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d001      	beq.n	800069e <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800069a:	f000 f8a9 	bl	80007f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800069e:	2360      	movs	r3, #96	; 0x60
 80006a0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80006a2:	2300      	movs	r3, #0
 80006a4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80006a6:	2300      	movs	r3, #0
 80006a8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80006aa:	2300      	movs	r3, #0
 80006ac:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80006ae:	1d3b      	adds	r3, r7, #4
 80006b0:	2200      	movs	r2, #0
 80006b2:	4619      	mov	r1, r3
 80006b4:	4807      	ldr	r0, [pc, #28]	; (80006d4 <MX_TIM3_Init+0xac>)
 80006b6:	f001 fd73 	bl	80021a0 <HAL_TIM_PWM_ConfigChannel>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 80006c0:	f000 f896 	bl	80007f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80006c4:	4803      	ldr	r0, [pc, #12]	; (80006d4 <MX_TIM3_Init+0xac>)
 80006c6:	f000 fabf 	bl	8000c48 <HAL_TIM_MspPostInit>

}
 80006ca:	bf00      	nop
 80006cc:	3728      	adds	r7, #40	; 0x28
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	20000094 	.word	0x20000094
 80006d8:	40000400 	.word	0x40000400

080006dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b088      	sub	sp, #32
 80006e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006e2:	f107 0310 	add.w	r3, r7, #16
 80006e6:	2200      	movs	r2, #0
 80006e8:	601a      	str	r2, [r3, #0]
 80006ea:	605a      	str	r2, [r3, #4]
 80006ec:	609a      	str	r2, [r3, #8]
 80006ee:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006f0:	4b34      	ldr	r3, [pc, #208]	; (80007c4 <MX_GPIO_Init+0xe8>)
 80006f2:	699b      	ldr	r3, [r3, #24]
 80006f4:	4a33      	ldr	r2, [pc, #204]	; (80007c4 <MX_GPIO_Init+0xe8>)
 80006f6:	f043 0304 	orr.w	r3, r3, #4
 80006fa:	6193      	str	r3, [r2, #24]
 80006fc:	4b31      	ldr	r3, [pc, #196]	; (80007c4 <MX_GPIO_Init+0xe8>)
 80006fe:	699b      	ldr	r3, [r3, #24]
 8000700:	f003 0304 	and.w	r3, r3, #4
 8000704:	60fb      	str	r3, [r7, #12]
 8000706:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000708:	4b2e      	ldr	r3, [pc, #184]	; (80007c4 <MX_GPIO_Init+0xe8>)
 800070a:	699b      	ldr	r3, [r3, #24]
 800070c:	4a2d      	ldr	r2, [pc, #180]	; (80007c4 <MX_GPIO_Init+0xe8>)
 800070e:	f043 0308 	orr.w	r3, r3, #8
 8000712:	6193      	str	r3, [r2, #24]
 8000714:	4b2b      	ldr	r3, [pc, #172]	; (80007c4 <MX_GPIO_Init+0xe8>)
 8000716:	699b      	ldr	r3, [r3, #24]
 8000718:	f003 0308 	and.w	r3, r3, #8
 800071c:	60bb      	str	r3, [r7, #8]
 800071e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000720:	4b28      	ldr	r3, [pc, #160]	; (80007c4 <MX_GPIO_Init+0xe8>)
 8000722:	699b      	ldr	r3, [r3, #24]
 8000724:	4a27      	ldr	r2, [pc, #156]	; (80007c4 <MX_GPIO_Init+0xe8>)
 8000726:	f043 0310 	orr.w	r3, r3, #16
 800072a:	6193      	str	r3, [r2, #24]
 800072c:	4b25      	ldr	r3, [pc, #148]	; (80007c4 <MX_GPIO_Init+0xe8>)
 800072e:	699b      	ldr	r3, [r3, #24]
 8000730:	f003 0310 	and.w	r3, r3, #16
 8000734:	607b      	str	r3, [r7, #4]
 8000736:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, D12_Pin|D7_Pin|D2_Pin, GPIO_PIN_RESET);
 8000738:	2200      	movs	r2, #0
 800073a:	f44f 61a8 	mov.w	r1, #1344	; 0x540
 800073e:	4822      	ldr	r0, [pc, #136]	; (80007c8 <MX_GPIO_Init+0xec>)
 8000740:	f000 ff33 	bl	80015aa <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D6_Pin|D3_Pin|D5_Pin|D4_Pin, GPIO_PIN_RESET);
 8000744:	2200      	movs	r2, #0
 8000746:	f44f 6187 	mov.w	r1, #1080	; 0x438
 800074a:	4820      	ldr	r0, [pc, #128]	; (80007cc <MX_GPIO_Init+0xf0>)
 800074c:	f000 ff2d 	bl	80015aa <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A0_Pin A1_Pin A2_Pin */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin;
 8000750:	2313      	movs	r3, #19
 8000752:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000754:	2300      	movs	r3, #0
 8000756:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000758:	2301      	movs	r3, #1
 800075a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800075c:	f107 0310 	add.w	r3, r7, #16
 8000760:	4619      	mov	r1, r3
 8000762:	4819      	ldr	r0, [pc, #100]	; (80007c8 <MX_GPIO_Init+0xec>)
 8000764:	f000 fd86 	bl	8001274 <HAL_GPIO_Init>

  /*Configure GPIO pins : D12_Pin D7_Pin D2_Pin */
  GPIO_InitStruct.Pin = D12_Pin|D7_Pin|D2_Pin;
 8000768:	f44f 63a8 	mov.w	r3, #1344	; 0x540
 800076c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800076e:	2301      	movs	r3, #1
 8000770:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000772:	2300      	movs	r3, #0
 8000774:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000776:	2302      	movs	r3, #2
 8000778:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800077a:	f107 0310 	add.w	r3, r7, #16
 800077e:	4619      	mov	r1, r3
 8000780:	4811      	ldr	r0, [pc, #68]	; (80007c8 <MX_GPIO_Init+0xec>)
 8000782:	f000 fd77 	bl	8001274 <HAL_GPIO_Init>

  /*Configure GPIO pin : A3_Pin */
  GPIO_InitStruct.Pin = A3_Pin;
 8000786:	2301      	movs	r3, #1
 8000788:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800078a:	2300      	movs	r3, #0
 800078c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800078e:	2301      	movs	r3, #1
 8000790:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(A3_GPIO_Port, &GPIO_InitStruct);
 8000792:	f107 0310 	add.w	r3, r7, #16
 8000796:	4619      	mov	r1, r3
 8000798:	480c      	ldr	r0, [pc, #48]	; (80007cc <MX_GPIO_Init+0xf0>)
 800079a:	f000 fd6b 	bl	8001274 <HAL_GPIO_Init>

  /*Configure GPIO pins : D6_Pin D3_Pin D5_Pin D4_Pin */
  GPIO_InitStruct.Pin = D6_Pin|D3_Pin|D5_Pin|D4_Pin;
 800079e:	f44f 6387 	mov.w	r3, #1080	; 0x438
 80007a2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007a4:	2301      	movs	r3, #1
 80007a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a8:	2300      	movs	r3, #0
 80007aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ac:	2302      	movs	r3, #2
 80007ae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007b0:	f107 0310 	add.w	r3, r7, #16
 80007b4:	4619      	mov	r1, r3
 80007b6:	4805      	ldr	r0, [pc, #20]	; (80007cc <MX_GPIO_Init+0xf0>)
 80007b8:	f000 fd5c 	bl	8001274 <HAL_GPIO_Init>

}
 80007bc:	bf00      	nop
 80007be:	3720      	adds	r7, #32
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	40021000 	.word	0x40021000
 80007c8:	40010800 	.word	0x40010800
 80007cc:	40010c00 	.word	0x40010c00

080007d0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b082      	sub	sp, #8
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
	TimerRun();
 80007d8:	f000 f932 	bl	8000a40 <TimerRun>
	GetKeyInput1();
 80007dc:	f7ff fd8c 	bl	80002f8 <GetKeyInput1>
	GetKeyInput2();
 80007e0:	f7ff fdd6 	bl	8000390 <GetKeyInput2>
	GetKeyInput3();
 80007e4:	f7ff fe20 	bl	8000428 <GetKeyInput3>
}
 80007e8:	bf00      	nop
 80007ea:	3708      	adds	r7, #8
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}

080007f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007f0:	b480      	push	{r7}
 80007f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007f4:	b672      	cpsid	i
}
 80007f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007f8:	e7fe      	b.n	80007f8 <Error_Handler+0x8>
	...

080007fc <man_fsm_run>:
 *  Created on: Dec 5, 2022
 *      Author: 84336
 */
#include "man_fsm.h"

void man_fsm_run() {
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0
	switch (status) {
 8000800:	4b50      	ldr	r3, [pc, #320]	; (8000944 <man_fsm_run+0x148>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	2b0e      	cmp	r3, #14
 8000806:	d063      	beq.n	80008d0 <man_fsm_run+0xd4>
 8000808:	2b0e      	cmp	r3, #14
 800080a:	f300 8091 	bgt.w	8000930 <man_fsm_run+0x134>
 800080e:	2b0c      	cmp	r3, #12
 8000810:	d002      	beq.n	8000818 <man_fsm_run+0x1c>
 8000812:	2b0d      	cmp	r3, #13
 8000814:	d034      	beq.n	8000880 <man_fsm_run+0x84>
			//SetTimer1(3000);
		}
		break;

	default:
		break;
 8000816:	e08b      	b.n	8000930 <man_fsm_run+0x134>
		RED_1();
 8000818:	f000 fa94 	bl	8000d44 <RED_1>
		GREEN_2();
 800081c:	f000 faee 	bl	8000dfc <GREEN_2>
		if (timer1_flag == 1) {
 8000820:	4b49      	ldr	r3, [pc, #292]	; (8000948 <man_fsm_run+0x14c>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	2b01      	cmp	r3, #1
 8000826:	d106      	bne.n	8000836 <man_fsm_run+0x3a>
			status = AUTO_GREEN;
 8000828:	4b46      	ldr	r3, [pc, #280]	; (8000944 <man_fsm_run+0x148>)
 800082a:	2204      	movs	r2, #4
 800082c:	601a      	str	r2, [r3, #0]
			SetTimer1(3000);
 800082e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000832:	f000 f8e9 	bl	8000a08 <SetTimer1>
		if (Button1_Is_Pressed() == 1) {
 8000836:	f7ff fd29 	bl	800028c <Button1_Is_Pressed>
 800083a:	4603      	mov	r3, r0
 800083c:	2b01      	cmp	r3, #1
 800083e:	d106      	bne.n	800084e <man_fsm_run+0x52>
			status = MAN_GREEN;
 8000840:	4b40      	ldr	r3, [pc, #256]	; (8000944 <man_fsm_run+0x148>)
 8000842:	220e      	movs	r2, #14
 8000844:	601a      	str	r2, [r3, #0]
			SetTimer1(3000);
 8000846:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800084a:	f000 f8dd 	bl	8000a08 <SetTimer1>
		if (Button2_Is_Pressed() == 1){
 800084e:	f7ff fd2f 	bl	80002b0 <Button2_Is_Pressed>
 8000852:	4603      	mov	r3, r0
 8000854:	2b01      	cmp	r3, #1
 8000856:	d106      	bne.n	8000866 <man_fsm_run+0x6a>
			status = TUN_RED;
 8000858:	4b3a      	ldr	r3, [pc, #232]	; (8000944 <man_fsm_run+0x148>)
 800085a:	2216      	movs	r2, #22
 800085c:	601a      	str	r2, [r3, #0]
			IncRed5s(5000);
 800085e:	f241 3088 	movw	r0, #5000	; 0x1388
 8000862:	f000 f929 	bl	8000ab8 <IncRed5s>
		if (Button3_Is_Pressed() == 1)
 8000866:	f7ff fd35 	bl	80002d4 <Button3_Is_Pressed>
 800086a:	4603      	mov	r3, r0
 800086c:	2b01      	cmp	r3, #1
 800086e:	d161      	bne.n	8000934 <man_fsm_run+0x138>
			status = PED_GREEN;
 8000870:	4b34      	ldr	r3, [pc, #208]	; (8000944 <man_fsm_run+0x148>)
 8000872:	2222      	movs	r2, #34	; 0x22
 8000874:	601a      	str	r2, [r3, #0]
			SetTimer1(5000);
 8000876:	f241 3088 	movw	r0, #5000	; 0x1388
 800087a:	f000 f8c5 	bl	8000a08 <SetTimer1>
		break;
 800087e:	e059      	b.n	8000934 <man_fsm_run+0x138>
		YELLOW_1();
 8000880:	f000 fa74 	bl	8000d6c <YELLOW_1>
		RED_2();
 8000884:	f000 fa9a 	bl	8000dbc <RED_2>
		if (timer1_flag == 1) {
 8000888:	4b2f      	ldr	r3, [pc, #188]	; (8000948 <man_fsm_run+0x14c>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	2b01      	cmp	r3, #1
 800088e:	d106      	bne.n	800089e <man_fsm_run+0xa2>
			status = AUTO_RED;
 8000890:	4b2c      	ldr	r3, [pc, #176]	; (8000944 <man_fsm_run+0x148>)
 8000892:	2202      	movs	r2, #2
 8000894:	601a      	str	r2, [r3, #0]
			SetTimer1(5000);
 8000896:	f241 3088 	movw	r0, #5000	; 0x1388
 800089a:	f000 f8b5 	bl	8000a08 <SetTimer1>
		if (Button1_Is_Pressed() == 1) {
 800089e:	f7ff fcf5 	bl	800028c <Button1_Is_Pressed>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b01      	cmp	r3, #1
 80008a6:	d106      	bne.n	80008b6 <man_fsm_run+0xba>
			status = MAN_RED;
 80008a8:	4b26      	ldr	r3, [pc, #152]	; (8000944 <man_fsm_run+0x148>)
 80008aa:	220c      	movs	r2, #12
 80008ac:	601a      	str	r2, [r3, #0]
			SetTimer1(5000);
 80008ae:	f241 3088 	movw	r0, #5000	; 0x1388
 80008b2:	f000 f8a9 	bl	8000a08 <SetTimer1>
		if (Button2_Is_Pressed() == 1) {
 80008b6:	f7ff fcfb 	bl	80002b0 <Button2_Is_Pressed>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b01      	cmp	r3, #1
 80008be:	d13b      	bne.n	8000938 <man_fsm_run+0x13c>
			status = TUN_YELLOW;
 80008c0:	4b20      	ldr	r3, [pc, #128]	; (8000944 <man_fsm_run+0x148>)
 80008c2:	2217      	movs	r2, #23
 80008c4:	601a      	str	r2, [r3, #0]
			IncYellow2s(2000);
 80008c6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80008ca:	f000 f911 	bl	8000af0 <IncYellow2s>
		break;
 80008ce:	e033      	b.n	8000938 <man_fsm_run+0x13c>
		GREEN_1();
 80008d0:	f000 fa60 	bl	8000d94 <GREEN_1>
		YELLOW_2();
 80008d4:	f000 fa82 	bl	8000ddc <YELLOW_2>
		if (timer1_flag == 1) {
 80008d8:	4b1b      	ldr	r3, [pc, #108]	; (8000948 <man_fsm_run+0x14c>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	2b01      	cmp	r3, #1
 80008de:	d106      	bne.n	80008ee <man_fsm_run+0xf2>
			status = AUTO_YELLOW;
 80008e0:	4b18      	ldr	r3, [pc, #96]	; (8000944 <man_fsm_run+0x148>)
 80008e2:	2203      	movs	r2, #3
 80008e4:	601a      	str	r2, [r3, #0]
			SetTimer1(2000);
 80008e6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80008ea:	f000 f88d 	bl	8000a08 <SetTimer1>
		if (Button1_Is_Pressed() == 1) {
 80008ee:	f7ff fccd 	bl	800028c <Button1_Is_Pressed>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b01      	cmp	r3, #1
 80008f6:	d106      	bne.n	8000906 <man_fsm_run+0x10a>
			status = MAN_YELLOW;
 80008f8:	4b12      	ldr	r3, [pc, #72]	; (8000944 <man_fsm_run+0x148>)
 80008fa:	220d      	movs	r2, #13
 80008fc:	601a      	str	r2, [r3, #0]
			SetTimer1(2000);
 80008fe:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000902:	f000 f881 	bl	8000a08 <SetTimer1>
		if (Button2_Is_Pressed() == 1) {
 8000906:	f7ff fcd3 	bl	80002b0 <Button2_Is_Pressed>
 800090a:	4603      	mov	r3, r0
 800090c:	2b01      	cmp	r3, #1
 800090e:	d106      	bne.n	800091e <man_fsm_run+0x122>
			status = TUN_GREEN;
 8000910:	4b0c      	ldr	r3, [pc, #48]	; (8000944 <man_fsm_run+0x148>)
 8000912:	2218      	movs	r2, #24
 8000914:	601a      	str	r2, [r3, #0]
			IncGreen3s(3000);
 8000916:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800091a:	f000 f905 	bl	8000b28 <IncGreen3s>
		if (Button3_Is_Pressed() == 1) {
 800091e:	f7ff fcd9 	bl	80002d4 <Button3_Is_Pressed>
 8000922:	4603      	mov	r3, r0
 8000924:	2b01      	cmp	r3, #1
 8000926:	d109      	bne.n	800093c <man_fsm_run+0x140>
			status = PED_RED;
 8000928:	4b06      	ldr	r3, [pc, #24]	; (8000944 <man_fsm_run+0x148>)
 800092a:	2220      	movs	r2, #32
 800092c:	601a      	str	r2, [r3, #0]
		break;
 800092e:	e005      	b.n	800093c <man_fsm_run+0x140>
		break;
 8000930:	bf00      	nop
 8000932:	e004      	b.n	800093e <man_fsm_run+0x142>
		break;
 8000934:	bf00      	nop
 8000936:	e002      	b.n	800093e <man_fsm_run+0x142>
		break;
 8000938:	bf00      	nop
 800093a:	e000      	b.n	800093e <man_fsm_run+0x142>
		break;
 800093c:	bf00      	nop
	}
}
 800093e:	bf00      	nop
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	20000070 	.word	0x20000070
 8000948:	20000074 	.word	0x20000074

0800094c <RED_3>:
 *      Author: Admin
 */

#include "pdtlight1.h"

void RED_3() {
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, RESET);
 8000950:	2200      	movs	r2, #0
 8000952:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000956:	4805      	ldr	r0, [pc, #20]	; (800096c <RED_3+0x20>)
 8000958:	f000 fe27 	bl	80015aa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, SET);
 800095c:	2201      	movs	r2, #1
 800095e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000962:	4803      	ldr	r0, [pc, #12]	; (8000970 <RED_3+0x24>)
 8000964:	f000 fe21 	bl	80015aa <HAL_GPIO_WritePin>
}
 8000968:	bf00      	nop
 800096a:	bd80      	pop	{r7, pc}
 800096c:	40010800 	.word	0x40010800
 8000970:	40010c00 	.word	0x40010c00

08000974 <GREEN_3>:

void GREEN_3() {
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, SET);
 8000978:	2201      	movs	r2, #1
 800097a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800097e:	4805      	ldr	r0, [pc, #20]	; (8000994 <GREEN_3+0x20>)
 8000980:	f000 fe13 	bl	80015aa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, RESET);
 8000984:	2200      	movs	r2, #0
 8000986:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800098a:	4803      	ldr	r0, [pc, #12]	; (8000998 <GREEN_3+0x24>)
 800098c:	f000 fe0d 	bl	80015aa <HAL_GPIO_WritePin>
}
 8000990:	bf00      	nop
 8000992:	bd80      	pop	{r7, pc}
 8000994:	40010800 	.word	0x40010800
 8000998:	40010c00 	.word	0x40010c00

0800099c <ped_fsm_run>:
 *  Created on: Dec 6, 2022
 *      Author: Admin
 */
#include "ped_fsm.h"

void ped_fsm_run() {
 800099c:	b580      	push	{r7, lr}
 800099e:	af00      	add	r7, sp, #0
	switch (status) {
 80009a0:	4b17      	ldr	r3, [pc, #92]	; (8000a00 <ped_fsm_run+0x64>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	2b20      	cmp	r3, #32
 80009a6:	d002      	beq.n	80009ae <ped_fsm_run+0x12>
 80009a8:	2b22      	cmp	r3, #34	; 0x22
 80009aa:	d012      	beq.n	80009d2 <ped_fsm_run+0x36>
			SetTimer1(5000);
		}
		break;

	default:
		break;
 80009ac:	e026      	b.n	80009fc <ped_fsm_run+0x60>
		GREEN_1();
 80009ae:	f000 f9f1 	bl	8000d94 <GREEN_1>
		YELLOW_2();
 80009b2:	f000 fa13 	bl	8000ddc <YELLOW_2>
		RED_3();
 80009b6:	f7ff ffc9 	bl	800094c <RED_3>
		if (timer1_flag == 1) {
 80009ba:	4b12      	ldr	r3, [pc, #72]	; (8000a04 <ped_fsm_run+0x68>)
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	2b01      	cmp	r3, #1
 80009c0:	d119      	bne.n	80009f6 <ped_fsm_run+0x5a>
			status = MAN_YELLOW;
 80009c2:	4b0f      	ldr	r3, [pc, #60]	; (8000a00 <ped_fsm_run+0x64>)
 80009c4:	220d      	movs	r2, #13
 80009c6:	601a      	str	r2, [r3, #0]
			SetTimer1(2000);
 80009c8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80009cc:	f000 f81c 	bl	8000a08 <SetTimer1>
		break;
 80009d0:	e011      	b.n	80009f6 <ped_fsm_run+0x5a>
		RED_1();
 80009d2:	f000 f9b7 	bl	8000d44 <RED_1>
		GREEN_2();
 80009d6:	f000 fa11 	bl	8000dfc <GREEN_2>
		GREEN_3();
 80009da:	f7ff ffcb 	bl	8000974 <GREEN_3>
		if (timer1_flag == 1) {
 80009de:	4b09      	ldr	r3, [pc, #36]	; (8000a04 <ped_fsm_run+0x68>)
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	2b01      	cmp	r3, #1
 80009e4:	d109      	bne.n	80009fa <ped_fsm_run+0x5e>
			status = MAN_RED;
 80009e6:	4b06      	ldr	r3, [pc, #24]	; (8000a00 <ped_fsm_run+0x64>)
 80009e8:	220c      	movs	r2, #12
 80009ea:	601a      	str	r2, [r3, #0]
			SetTimer1(5000);
 80009ec:	f241 3088 	movw	r0, #5000	; 0x1388
 80009f0:	f000 f80a 	bl	8000a08 <SetTimer1>
		break;
 80009f4:	e001      	b.n	80009fa <ped_fsm_run+0x5e>
		break;
 80009f6:	bf00      	nop
 80009f8:	e000      	b.n	80009fc <ped_fsm_run+0x60>
		break;
 80009fa:	bf00      	nop
	}
}
 80009fc:	bf00      	nop
 80009fe:	bd80      	pop	{r7, pc}
 8000a00:	20000070 	.word	0x20000070
 8000a04:	20000074 	.word	0x20000074

08000a08 <SetTimer1>:
int timer1_flag = 0, timer1_counter = 0;
int timer_red_flag = 0, timer_red_counter = 0;
int timer_yellow_counter = 0, timer_yellow_flag = 0;
int timer_green_counter = 0, timer_green_flag = 0;
int timer_pedes_counter = 0, timer_pedes_flag = 0;
void SetTimer1 (int duration) {
 8000a08:	b480      	push	{r7}
 8000a0a:	b083      	sub	sp, #12
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
	timer1_counter = duration / TICK;
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	4a08      	ldr	r2, [pc, #32]	; (8000a34 <SetTimer1+0x2c>)
 8000a14:	fb82 1203 	smull	r1, r2, r2, r3
 8000a18:	1092      	asrs	r2, r2, #2
 8000a1a:	17db      	asrs	r3, r3, #31
 8000a1c:	1ad3      	subs	r3, r2, r3
 8000a1e:	4a06      	ldr	r2, [pc, #24]	; (8000a38 <SetTimer1+0x30>)
 8000a20:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 8000a22:	4b06      	ldr	r3, [pc, #24]	; (8000a3c <SetTimer1+0x34>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	601a      	str	r2, [r3, #0]
}
 8000a28:	bf00      	nop
 8000a2a:	370c      	adds	r7, #12
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bc80      	pop	{r7}
 8000a30:	4770      	bx	lr
 8000a32:	bf00      	nop
 8000a34:	66666667 	.word	0x66666667
 8000a38:	20000078 	.word	0x20000078
 8000a3c:	20000074 	.word	0x20000074

08000a40 <TimerRun>:

void TimerRun () {
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0
	if (timer1_counter > 0) {
 8000a44:	4b14      	ldr	r3, [pc, #80]	; (8000a98 <TimerRun+0x58>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	dd0b      	ble.n	8000a64 <TimerRun+0x24>
		timer1_counter--;
 8000a4c:	4b12      	ldr	r3, [pc, #72]	; (8000a98 <TimerRun+0x58>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	3b01      	subs	r3, #1
 8000a52:	4a11      	ldr	r2, [pc, #68]	; (8000a98 <TimerRun+0x58>)
 8000a54:	6013      	str	r3, [r2, #0]
		if (timer1_counter <= 0) {
 8000a56:	4b10      	ldr	r3, [pc, #64]	; (8000a98 <TimerRun+0x58>)
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	dc02      	bgt.n	8000a64 <TimerRun+0x24>
			timer1_flag = 1;
 8000a5e:	4b0f      	ldr	r3, [pc, #60]	; (8000a9c <TimerRun+0x5c>)
 8000a60:	2201      	movs	r2, #1
 8000a62:	601a      	str	r2, [r3, #0]
		}
	}
	if (timer_red_counter  <= 0) {
 8000a64:	4b0e      	ldr	r3, [pc, #56]	; (8000aa0 <TimerRun+0x60>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	dc02      	bgt.n	8000a72 <TimerRun+0x32>
			timer_red_flag = 1;
 8000a6c:	4b0d      	ldr	r3, [pc, #52]	; (8000aa4 <TimerRun+0x64>)
 8000a6e:	2201      	movs	r2, #1
 8000a70:	601a      	str	r2, [r3, #0]
		}
	if (timer_yellow_counter <= 0) {
 8000a72:	4b0d      	ldr	r3, [pc, #52]	; (8000aa8 <TimerRun+0x68>)
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	dc02      	bgt.n	8000a80 <TimerRun+0x40>
			timer_yellow_flag = 1;
 8000a7a:	4b0c      	ldr	r3, [pc, #48]	; (8000aac <TimerRun+0x6c>)
 8000a7c:	2201      	movs	r2, #1
 8000a7e:	601a      	str	r2, [r3, #0]
		}
	if (timer_green_counter <= 0) {
 8000a80:	4b0b      	ldr	r3, [pc, #44]	; (8000ab0 <TimerRun+0x70>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	dc02      	bgt.n	8000a8e <TimerRun+0x4e>
			timer_green_flag = 1;
 8000a88:	4b0a      	ldr	r3, [pc, #40]	; (8000ab4 <TimerRun+0x74>)
 8000a8a:	2201      	movs	r2, #1
 8000a8c:	601a      	str	r2, [r3, #0]
		}
}
 8000a8e:	bf00      	nop
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bc80      	pop	{r7}
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop
 8000a98:	20000078 	.word	0x20000078
 8000a9c:	20000074 	.word	0x20000074
 8000aa0:	20000080 	.word	0x20000080
 8000aa4:	2000007c 	.word	0x2000007c
 8000aa8:	20000084 	.word	0x20000084
 8000aac:	20000088 	.word	0x20000088
 8000ab0:	2000008c 	.word	0x2000008c
 8000ab4:	20000090 	.word	0x20000090

08000ab8 <IncRed5s>:

void IncRed5s (int duration) {
 8000ab8:	b480      	push	{r7}
 8000aba:	b083      	sub	sp, #12
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
	timer_red_counter = duration / TICK;
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	4a09      	ldr	r2, [pc, #36]	; (8000ae8 <IncRed5s+0x30>)
 8000ac4:	fb82 1203 	smull	r1, r2, r2, r3
 8000ac8:	1092      	asrs	r2, r2, #2
 8000aca:	17db      	asrs	r3, r3, #31
 8000acc:	1ad3      	subs	r3, r2, r3
 8000ace:	4a07      	ldr	r2, [pc, #28]	; (8000aec <IncRed5s+0x34>)
 8000ad0:	6013      	str	r3, [r2, #0]
	timer_red_counter--;
 8000ad2:	4b06      	ldr	r3, [pc, #24]	; (8000aec <IncRed5s+0x34>)
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	3b01      	subs	r3, #1
 8000ad8:	4a04      	ldr	r2, [pc, #16]	; (8000aec <IncRed5s+0x34>)
 8000ada:	6013      	str	r3, [r2, #0]
}
 8000adc:	bf00      	nop
 8000ade:	370c      	adds	r7, #12
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bc80      	pop	{r7}
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop
 8000ae8:	66666667 	.word	0x66666667
 8000aec:	20000080 	.word	0x20000080

08000af0 <IncYellow2s>:

void IncYellow2s (int duration) {
 8000af0:	b480      	push	{r7}
 8000af2:	b083      	sub	sp, #12
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
	timer_yellow_counter = duration / TICK;
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	4a09      	ldr	r2, [pc, #36]	; (8000b20 <IncYellow2s+0x30>)
 8000afc:	fb82 1203 	smull	r1, r2, r2, r3
 8000b00:	1092      	asrs	r2, r2, #2
 8000b02:	17db      	asrs	r3, r3, #31
 8000b04:	1ad3      	subs	r3, r2, r3
 8000b06:	4a07      	ldr	r2, [pc, #28]	; (8000b24 <IncYellow2s+0x34>)
 8000b08:	6013      	str	r3, [r2, #0]
	timer_yellow_counter--;
 8000b0a:	4b06      	ldr	r3, [pc, #24]	; (8000b24 <IncYellow2s+0x34>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	3b01      	subs	r3, #1
 8000b10:	4a04      	ldr	r2, [pc, #16]	; (8000b24 <IncYellow2s+0x34>)
 8000b12:	6013      	str	r3, [r2, #0]
}
 8000b14:	bf00      	nop
 8000b16:	370c      	adds	r7, #12
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bc80      	pop	{r7}
 8000b1c:	4770      	bx	lr
 8000b1e:	bf00      	nop
 8000b20:	66666667 	.word	0x66666667
 8000b24:	20000084 	.word	0x20000084

08000b28 <IncGreen3s>:

void IncGreen3s (int duration) {
 8000b28:	b480      	push	{r7}
 8000b2a:	b083      	sub	sp, #12
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
	timer_green_counter = duration / TICK;
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	4a09      	ldr	r2, [pc, #36]	; (8000b58 <IncGreen3s+0x30>)
 8000b34:	fb82 1203 	smull	r1, r2, r2, r3
 8000b38:	1092      	asrs	r2, r2, #2
 8000b3a:	17db      	asrs	r3, r3, #31
 8000b3c:	1ad3      	subs	r3, r2, r3
 8000b3e:	4a07      	ldr	r2, [pc, #28]	; (8000b5c <IncGreen3s+0x34>)
 8000b40:	6013      	str	r3, [r2, #0]
	timer_green_counter--;
 8000b42:	4b06      	ldr	r3, [pc, #24]	; (8000b5c <IncGreen3s+0x34>)
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	3b01      	subs	r3, #1
 8000b48:	4a04      	ldr	r2, [pc, #16]	; (8000b5c <IncGreen3s+0x34>)
 8000b4a:	6013      	str	r3, [r2, #0]
}
 8000b4c:	bf00      	nop
 8000b4e:	370c      	adds	r7, #12
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bc80      	pop	{r7}
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop
 8000b58:	66666667 	.word	0x66666667
 8000b5c:	2000008c 	.word	0x2000008c

08000b60 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	b085      	sub	sp, #20
 8000b64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000b66:	4b15      	ldr	r3, [pc, #84]	; (8000bbc <HAL_MspInit+0x5c>)
 8000b68:	699b      	ldr	r3, [r3, #24]
 8000b6a:	4a14      	ldr	r2, [pc, #80]	; (8000bbc <HAL_MspInit+0x5c>)
 8000b6c:	f043 0301 	orr.w	r3, r3, #1
 8000b70:	6193      	str	r3, [r2, #24]
 8000b72:	4b12      	ldr	r3, [pc, #72]	; (8000bbc <HAL_MspInit+0x5c>)
 8000b74:	699b      	ldr	r3, [r3, #24]
 8000b76:	f003 0301 	and.w	r3, r3, #1
 8000b7a:	60bb      	str	r3, [r7, #8]
 8000b7c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b7e:	4b0f      	ldr	r3, [pc, #60]	; (8000bbc <HAL_MspInit+0x5c>)
 8000b80:	69db      	ldr	r3, [r3, #28]
 8000b82:	4a0e      	ldr	r2, [pc, #56]	; (8000bbc <HAL_MspInit+0x5c>)
 8000b84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b88:	61d3      	str	r3, [r2, #28]
 8000b8a:	4b0c      	ldr	r3, [pc, #48]	; (8000bbc <HAL_MspInit+0x5c>)
 8000b8c:	69db      	ldr	r3, [r3, #28]
 8000b8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b92:	607b      	str	r3, [r7, #4]
 8000b94:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000b96:	4b0a      	ldr	r3, [pc, #40]	; (8000bc0 <HAL_MspInit+0x60>)
 8000b98:	685b      	ldr	r3, [r3, #4]
 8000b9a:	60fb      	str	r3, [r7, #12]
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000ba2:	60fb      	str	r3, [r7, #12]
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000baa:	60fb      	str	r3, [r7, #12]
 8000bac:	4a04      	ldr	r2, [pc, #16]	; (8000bc0 <HAL_MspInit+0x60>)
 8000bae:	68fb      	ldr	r3, [r7, #12]
 8000bb0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bb2:	bf00      	nop
 8000bb4:	3714      	adds	r7, #20
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bc80      	pop	{r7}
 8000bba:	4770      	bx	lr
 8000bbc:	40021000 	.word	0x40021000
 8000bc0:	40010000 	.word	0x40010000

08000bc4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b084      	sub	sp, #16
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000bd4:	d113      	bne.n	8000bfe <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000bd6:	4b0c      	ldr	r3, [pc, #48]	; (8000c08 <HAL_TIM_Base_MspInit+0x44>)
 8000bd8:	69db      	ldr	r3, [r3, #28]
 8000bda:	4a0b      	ldr	r2, [pc, #44]	; (8000c08 <HAL_TIM_Base_MspInit+0x44>)
 8000bdc:	f043 0301 	orr.w	r3, r3, #1
 8000be0:	61d3      	str	r3, [r2, #28]
 8000be2:	4b09      	ldr	r3, [pc, #36]	; (8000c08 <HAL_TIM_Base_MspInit+0x44>)
 8000be4:	69db      	ldr	r3, [r3, #28]
 8000be6:	f003 0301 	and.w	r3, r3, #1
 8000bea:	60fb      	str	r3, [r7, #12]
 8000bec:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000bee:	2200      	movs	r2, #0
 8000bf0:	2100      	movs	r1, #0
 8000bf2:	201c      	movs	r0, #28
 8000bf4:	f000 fb07 	bl	8001206 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000bf8:	201c      	movs	r0, #28
 8000bfa:	f000 fb20 	bl	800123e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000bfe:	bf00      	nop
 8000c00:	3710      	adds	r7, #16
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	40021000 	.word	0x40021000

08000c0c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	b085      	sub	sp, #20
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	4a09      	ldr	r2, [pc, #36]	; (8000c40 <HAL_TIM_PWM_MspInit+0x34>)
 8000c1a:	4293      	cmp	r3, r2
 8000c1c:	d10b      	bne.n	8000c36 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000c1e:	4b09      	ldr	r3, [pc, #36]	; (8000c44 <HAL_TIM_PWM_MspInit+0x38>)
 8000c20:	69db      	ldr	r3, [r3, #28]
 8000c22:	4a08      	ldr	r2, [pc, #32]	; (8000c44 <HAL_TIM_PWM_MspInit+0x38>)
 8000c24:	f043 0302 	orr.w	r3, r3, #2
 8000c28:	61d3      	str	r3, [r2, #28]
 8000c2a:	4b06      	ldr	r3, [pc, #24]	; (8000c44 <HAL_TIM_PWM_MspInit+0x38>)
 8000c2c:	69db      	ldr	r3, [r3, #28]
 8000c2e:	f003 0302 	and.w	r3, r3, #2
 8000c32:	60fb      	str	r3, [r7, #12]
 8000c34:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000c36:	bf00      	nop
 8000c38:	3714      	adds	r7, #20
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bc80      	pop	{r7}
 8000c3e:	4770      	bx	lr
 8000c40:	40000400 	.word	0x40000400
 8000c44:	40021000 	.word	0x40021000

08000c48 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b088      	sub	sp, #32
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c50:	f107 030c 	add.w	r3, r7, #12
 8000c54:	2200      	movs	r2, #0
 8000c56:	601a      	str	r2, [r3, #0]
 8000c58:	605a      	str	r2, [r3, #4]
 8000c5a:	609a      	str	r2, [r3, #8]
 8000c5c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	4a18      	ldr	r2, [pc, #96]	; (8000cc4 <HAL_TIM_MspPostInit+0x7c>)
 8000c64:	4293      	cmp	r3, r2
 8000c66:	d129      	bne.n	8000cbc <HAL_TIM_MspPostInit+0x74>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c68:	4b17      	ldr	r3, [pc, #92]	; (8000cc8 <HAL_TIM_MspPostInit+0x80>)
 8000c6a:	699b      	ldr	r3, [r3, #24]
 8000c6c:	4a16      	ldr	r2, [pc, #88]	; (8000cc8 <HAL_TIM_MspPostInit+0x80>)
 8000c6e:	f043 0310 	orr.w	r3, r3, #16
 8000c72:	6193      	str	r3, [r2, #24]
 8000c74:	4b14      	ldr	r3, [pc, #80]	; (8000cc8 <HAL_TIM_MspPostInit+0x80>)
 8000c76:	699b      	ldr	r3, [r3, #24]
 8000c78:	f003 0310 	and.w	r3, r3, #16
 8000c7c:	60bb      	str	r3, [r7, #8]
 8000c7e:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000c80:	2340      	movs	r3, #64	; 0x40
 8000c82:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c84:	2302      	movs	r3, #2
 8000c86:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c88:	2302      	movs	r3, #2
 8000c8a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c8c:	f107 030c 	add.w	r3, r7, #12
 8000c90:	4619      	mov	r1, r3
 8000c92:	480e      	ldr	r0, [pc, #56]	; (8000ccc <HAL_TIM_MspPostInit+0x84>)
 8000c94:	f000 faee 	bl	8001274 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM3_ENABLE();
 8000c98:	4b0d      	ldr	r3, [pc, #52]	; (8000cd0 <HAL_TIM_MspPostInit+0x88>)
 8000c9a:	685b      	ldr	r3, [r3, #4]
 8000c9c:	61fb      	str	r3, [r7, #28]
 8000c9e:	69fb      	ldr	r3, [r7, #28]
 8000ca0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8000ca4:	61fb      	str	r3, [r7, #28]
 8000ca6:	69fb      	ldr	r3, [r7, #28]
 8000ca8:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000cac:	61fb      	str	r3, [r7, #28]
 8000cae:	69fb      	ldr	r3, [r7, #28]
 8000cb0:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 8000cb4:	61fb      	str	r3, [r7, #28]
 8000cb6:	4a06      	ldr	r2, [pc, #24]	; (8000cd0 <HAL_TIM_MspPostInit+0x88>)
 8000cb8:	69fb      	ldr	r3, [r7, #28]
 8000cba:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000cbc:	bf00      	nop
 8000cbe:	3720      	adds	r7, #32
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	40000400 	.word	0x40000400
 8000cc8:	40021000 	.word	0x40021000
 8000ccc:	40011000 	.word	0x40011000
 8000cd0:	40010000 	.word	0x40010000

08000cd4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cd8:	e7fe      	b.n	8000cd8 <NMI_Handler+0x4>

08000cda <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cda:	b480      	push	{r7}
 8000cdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cde:	e7fe      	b.n	8000cde <HardFault_Handler+0x4>

08000ce0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ce4:	e7fe      	b.n	8000ce4 <MemManage_Handler+0x4>

08000ce6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ce6:	b480      	push	{r7}
 8000ce8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cea:	e7fe      	b.n	8000cea <BusFault_Handler+0x4>

08000cec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cf0:	e7fe      	b.n	8000cf0 <UsageFault_Handler+0x4>

08000cf2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cf2:	b480      	push	{r7}
 8000cf4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cf6:	bf00      	nop
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bc80      	pop	{r7}
 8000cfc:	4770      	bx	lr

08000cfe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cfe:	b480      	push	{r7}
 8000d00:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d02:	bf00      	nop
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bc80      	pop	{r7}
 8000d08:	4770      	bx	lr

08000d0a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d0a:	b480      	push	{r7}
 8000d0c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d0e:	bf00      	nop
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bc80      	pop	{r7}
 8000d14:	4770      	bx	lr

08000d16 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d16:	b580      	push	{r7, lr}
 8000d18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d1a:	f000 f981 	bl	8001020 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d1e:	bf00      	nop
 8000d20:	bd80      	pop	{r7, pc}
	...

08000d24 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000d28:	4802      	ldr	r0, [pc, #8]	; (8000d34 <TIM2_IRQHandler+0x10>)
 8000d2a:	f001 f930 	bl	8001f8e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000d2e:	bf00      	nop
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	200000dc 	.word	0x200000dc

08000d38 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d3c:	bf00      	nop
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bc80      	pop	{r7}
 8000d42:	4770      	bx	lr

08000d44 <RED_1>:
 *  Created on: Nov 30, 2022
 *      Author: 84336
 */
#include "traffic1.h"

void RED_1() {
 8000d44:	b580      	push	{r7, lr}
 8000d46:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, RESET);
 8000d48:	2200      	movs	r2, #0
 8000d4a:	2108      	movs	r1, #8
 8000d4c:	4805      	ldr	r0, [pc, #20]	; (8000d64 <RED_1+0x20>)
 8000d4e:	f000 fc2c 	bl	80015aa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, SET);
 8000d52:	2201      	movs	r2, #1
 8000d54:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d58:	4803      	ldr	r0, [pc, #12]	; (8000d68 <RED_1+0x24>)
 8000d5a:	f000 fc26 	bl	80015aa <HAL_GPIO_WritePin>
}
 8000d5e:	bf00      	nop
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	40010c00 	.word	0x40010c00
 8000d68:	40010800 	.word	0x40010800

08000d6c <YELLOW_1>:

void YELLOW_1() {
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, SET);
 8000d70:	2201      	movs	r2, #1
 8000d72:	2108      	movs	r1, #8
 8000d74:	4805      	ldr	r0, [pc, #20]	; (8000d8c <YELLOW_1+0x20>)
 8000d76:	f000 fc18 	bl	80015aa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, SET);
 8000d7a:	2201      	movs	r2, #1
 8000d7c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d80:	4803      	ldr	r0, [pc, #12]	; (8000d90 <YELLOW_1+0x24>)
 8000d82:	f000 fc12 	bl	80015aa <HAL_GPIO_WritePin>
}
 8000d86:	bf00      	nop
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	40010c00 	.word	0x40010c00
 8000d90:	40010800 	.word	0x40010800

08000d94 <GREEN_1>:

void GREEN_1() {
 8000d94:	b580      	push	{r7, lr}
 8000d96:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, SET);
 8000d98:	2201      	movs	r2, #1
 8000d9a:	2108      	movs	r1, #8
 8000d9c:	4805      	ldr	r0, [pc, #20]	; (8000db4 <GREEN_1+0x20>)
 8000d9e:	f000 fc04 	bl	80015aa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, RESET);
 8000da2:	2200      	movs	r2, #0
 8000da4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000da8:	4803      	ldr	r0, [pc, #12]	; (8000db8 <GREEN_1+0x24>)
 8000daa:	f000 fbfe 	bl	80015aa <HAL_GPIO_WritePin>
}
 8000dae:	bf00      	nop
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	40010c00 	.word	0x40010c00
 8000db8:	40010800 	.word	0x40010800

08000dbc <RED_2>:
 *  Created on: Nov 30, 2022
 *      Author: 84336
 */
#include "traffic2.h"

void RED_2() {
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, SET);
 8000dc0:	2201      	movs	r2, #1
 8000dc2:	2120      	movs	r1, #32
 8000dc4:	4804      	ldr	r0, [pc, #16]	; (8000dd8 <RED_2+0x1c>)
 8000dc6:	f000 fbf0 	bl	80015aa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, RESET);
 8000dca:	2200      	movs	r2, #0
 8000dcc:	2110      	movs	r1, #16
 8000dce:	4802      	ldr	r0, [pc, #8]	; (8000dd8 <RED_2+0x1c>)
 8000dd0:	f000 fbeb 	bl	80015aa <HAL_GPIO_WritePin>
}
 8000dd4:	bf00      	nop
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	40010c00 	.word	0x40010c00

08000ddc <YELLOW_2>:

void YELLOW_2() {
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, SET);
 8000de0:	2201      	movs	r2, #1
 8000de2:	2120      	movs	r1, #32
 8000de4:	4804      	ldr	r0, [pc, #16]	; (8000df8 <YELLOW_2+0x1c>)
 8000de6:	f000 fbe0 	bl	80015aa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, SET);
 8000dea:	2201      	movs	r2, #1
 8000dec:	2110      	movs	r1, #16
 8000dee:	4802      	ldr	r0, [pc, #8]	; (8000df8 <YELLOW_2+0x1c>)
 8000df0:	f000 fbdb 	bl	80015aa <HAL_GPIO_WritePin>
}
 8000df4:	bf00      	nop
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	40010c00 	.word	0x40010c00

08000dfc <GREEN_2>:

void GREEN_2() {
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, RESET);
 8000e00:	2200      	movs	r2, #0
 8000e02:	2120      	movs	r1, #32
 8000e04:	4804      	ldr	r0, [pc, #16]	; (8000e18 <GREEN_2+0x1c>)
 8000e06:	f000 fbd0 	bl	80015aa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, SET);
 8000e0a:	2201      	movs	r2, #1
 8000e0c:	2110      	movs	r1, #16
 8000e0e:	4802      	ldr	r0, [pc, #8]	; (8000e18 <GREEN_2+0x1c>)
 8000e10:	f000 fbcb 	bl	80015aa <HAL_GPIO_WritePin>
}
 8000e14:	bf00      	nop
 8000e16:	bd80      	pop	{r7, pc}
 8000e18:	40010c00 	.word	0x40010c00

08000e1c <tun_fsm_run>:
 *  Created on: Dec 6, 2022
 *      Author: ADMIN
 */
#include "tun_fsm.h"

void tun_fsm_run(){
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	af00      	add	r7, sp, #0
	switch(status) {
 8000e20:	4b45      	ldr	r3, [pc, #276]	; (8000f38 <tun_fsm_run+0x11c>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	2b18      	cmp	r3, #24
 8000e26:	d056      	beq.n	8000ed6 <tun_fsm_run+0xba>
 8000e28:	2b18      	cmp	r3, #24
 8000e2a:	dc7c      	bgt.n	8000f26 <tun_fsm_run+0x10a>
 8000e2c:	2b16      	cmp	r3, #22
 8000e2e:	d002      	beq.n	8000e36 <tun_fsm_run+0x1a>
 8000e30:	2b17      	cmp	r3, #23
 8000e32:	d028      	beq.n	8000e86 <tun_fsm_run+0x6a>
			IncGreen3s(3000);
		}
		break;

	default:
		break;
 8000e34:	e077      	b.n	8000f26 <tun_fsm_run+0x10a>
		RED_1();
 8000e36:	f7ff ff85 	bl	8000d44 <RED_1>
		GREEN_2();
 8000e3a:	f7ff ffdf 	bl	8000dfc <GREEN_2>
		if (timer_red_flag == 1) {
 8000e3e:	4b3f      	ldr	r3, [pc, #252]	; (8000f3c <tun_fsm_run+0x120>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	2b01      	cmp	r3, #1
 8000e44:	d106      	bne.n	8000e54 <tun_fsm_run+0x38>
			status = AUTO_GREEN;
 8000e46:	4b3c      	ldr	r3, [pc, #240]	; (8000f38 <tun_fsm_run+0x11c>)
 8000e48:	2204      	movs	r2, #4
 8000e4a:	601a      	str	r2, [r3, #0]
			SetTimer1(3000);
 8000e4c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000e50:	f7ff fdda 	bl	8000a08 <SetTimer1>
		if (Button1_Is_Pressed() == 1) {
 8000e54:	f7ff fa1a 	bl	800028c <Button1_Is_Pressed>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b01      	cmp	r3, #1
 8000e5c:	d106      	bne.n	8000e6c <tun_fsm_run+0x50>
			status = MAN_GREEN;
 8000e5e:	4b36      	ldr	r3, [pc, #216]	; (8000f38 <tun_fsm_run+0x11c>)
 8000e60:	220e      	movs	r2, #14
 8000e62:	601a      	str	r2, [r3, #0]
			SetTimer1(3000);
 8000e64:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000e68:	f7ff fdce 	bl	8000a08 <SetTimer1>
		if (Button2_Is_Pressed() == 1) {
 8000e6c:	f7ff fa20 	bl	80002b0 <Button2_Is_Pressed>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2b01      	cmp	r3, #1
 8000e74:	d159      	bne.n	8000f2a <tun_fsm_run+0x10e>
			status = TUN_RED;
 8000e76:	4b30      	ldr	r3, [pc, #192]	; (8000f38 <tun_fsm_run+0x11c>)
 8000e78:	2216      	movs	r2, #22
 8000e7a:	601a      	str	r2, [r3, #0]
			IncRed5s(5000);
 8000e7c:	f241 3088 	movw	r0, #5000	; 0x1388
 8000e80:	f7ff fe1a 	bl	8000ab8 <IncRed5s>
		break;
 8000e84:	e051      	b.n	8000f2a <tun_fsm_run+0x10e>
		YELLOW_1();
 8000e86:	f7ff ff71 	bl	8000d6c <YELLOW_1>
		RED_2();
 8000e8a:	f7ff ff97 	bl	8000dbc <RED_2>
		if (timer_yellow_flag == 1) {
 8000e8e:	4b2c      	ldr	r3, [pc, #176]	; (8000f40 <tun_fsm_run+0x124>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	2b01      	cmp	r3, #1
 8000e94:	d106      	bne.n	8000ea4 <tun_fsm_run+0x88>
			status = AUTO_RED;
 8000e96:	4b28      	ldr	r3, [pc, #160]	; (8000f38 <tun_fsm_run+0x11c>)
 8000e98:	2202      	movs	r2, #2
 8000e9a:	601a      	str	r2, [r3, #0]
			SetTimer1(5000);
 8000e9c:	f241 3088 	movw	r0, #5000	; 0x1388
 8000ea0:	f7ff fdb2 	bl	8000a08 <SetTimer1>
		if (Button1_Is_Pressed() == 1) {
 8000ea4:	f7ff f9f2 	bl	800028c <Button1_Is_Pressed>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	2b01      	cmp	r3, #1
 8000eac:	d106      	bne.n	8000ebc <tun_fsm_run+0xa0>
			status = MAN_RED;
 8000eae:	4b22      	ldr	r3, [pc, #136]	; (8000f38 <tun_fsm_run+0x11c>)
 8000eb0:	220c      	movs	r2, #12
 8000eb2:	601a      	str	r2, [r3, #0]
			SetTimer1(5000);
 8000eb4:	f241 3088 	movw	r0, #5000	; 0x1388
 8000eb8:	f7ff fda6 	bl	8000a08 <SetTimer1>
		if (Button2_Is_Pressed() == 1) {
 8000ebc:	f7ff f9f8 	bl	80002b0 <Button2_Is_Pressed>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	2b01      	cmp	r3, #1
 8000ec4:	d133      	bne.n	8000f2e <tun_fsm_run+0x112>
			status = TUN_YELLOW;
 8000ec6:	4b1c      	ldr	r3, [pc, #112]	; (8000f38 <tun_fsm_run+0x11c>)
 8000ec8:	2217      	movs	r2, #23
 8000eca:	601a      	str	r2, [r3, #0]
			IncYellow2s(2000);
 8000ecc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000ed0:	f7ff fe0e 	bl	8000af0 <IncYellow2s>
		break;
 8000ed4:	e02b      	b.n	8000f2e <tun_fsm_run+0x112>
		GREEN_1();
 8000ed6:	f7ff ff5d 	bl	8000d94 <GREEN_1>
		YELLOW_2();
 8000eda:	f7ff ff7f 	bl	8000ddc <YELLOW_2>
		if (timer_green_flag == 1) {
 8000ede:	4b19      	ldr	r3, [pc, #100]	; (8000f44 <tun_fsm_run+0x128>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	2b01      	cmp	r3, #1
 8000ee4:	d106      	bne.n	8000ef4 <tun_fsm_run+0xd8>
			status = AUTO_YELLOW;
 8000ee6:	4b14      	ldr	r3, [pc, #80]	; (8000f38 <tun_fsm_run+0x11c>)
 8000ee8:	2203      	movs	r2, #3
 8000eea:	601a      	str	r2, [r3, #0]
			SetTimer1(2000);
 8000eec:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000ef0:	f7ff fd8a 	bl	8000a08 <SetTimer1>
		if (Button1_Is_Pressed() == 1) {
 8000ef4:	f7ff f9ca 	bl	800028c <Button1_Is_Pressed>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b01      	cmp	r3, #1
 8000efc:	d106      	bne.n	8000f0c <tun_fsm_run+0xf0>
			status = MAN_YELLOW;
 8000efe:	4b0e      	ldr	r3, [pc, #56]	; (8000f38 <tun_fsm_run+0x11c>)
 8000f00:	220d      	movs	r2, #13
 8000f02:	601a      	str	r2, [r3, #0]
			SetTimer1(2000);
 8000f04:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000f08:	f7ff fd7e 	bl	8000a08 <SetTimer1>
		if (Button2_Is_Pressed() == 1) {
 8000f0c:	f7ff f9d0 	bl	80002b0 <Button2_Is_Pressed>
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b01      	cmp	r3, #1
 8000f14:	d10d      	bne.n	8000f32 <tun_fsm_run+0x116>
			status = TUN_GREEN;
 8000f16:	4b08      	ldr	r3, [pc, #32]	; (8000f38 <tun_fsm_run+0x11c>)
 8000f18:	2218      	movs	r2, #24
 8000f1a:	601a      	str	r2, [r3, #0]
			IncGreen3s(3000);
 8000f1c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000f20:	f7ff fe02 	bl	8000b28 <IncGreen3s>
		break;
 8000f24:	e005      	b.n	8000f32 <tun_fsm_run+0x116>
		break;
 8000f26:	bf00      	nop
 8000f28:	e004      	b.n	8000f34 <tun_fsm_run+0x118>
		break;
 8000f2a:	bf00      	nop
 8000f2c:	e002      	b.n	8000f34 <tun_fsm_run+0x118>
		break;
 8000f2e:	bf00      	nop
 8000f30:	e000      	b.n	8000f34 <tun_fsm_run+0x118>
		break;
 8000f32:	bf00      	nop
	}
}
 8000f34:	bf00      	nop
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	20000070 	.word	0x20000070
 8000f3c:	2000007c 	.word	0x2000007c
 8000f40:	20000088 	.word	0x20000088
 8000f44:	20000090 	.word	0x20000090

08000f48 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f48:	480c      	ldr	r0, [pc, #48]	; (8000f7c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f4a:	490d      	ldr	r1, [pc, #52]	; (8000f80 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f4c:	4a0d      	ldr	r2, [pc, #52]	; (8000f84 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f50:	e002      	b.n	8000f58 <LoopCopyDataInit>

08000f52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f56:	3304      	adds	r3, #4

08000f58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f5c:	d3f9      	bcc.n	8000f52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f5e:	4a0a      	ldr	r2, [pc, #40]	; (8000f88 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f60:	4c0a      	ldr	r4, [pc, #40]	; (8000f8c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f64:	e001      	b.n	8000f6a <LoopFillZerobss>

08000f66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f68:	3204      	adds	r2, #4

08000f6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f6c:	d3fb      	bcc.n	8000f66 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000f6e:	f7ff fee3 	bl	8000d38 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f72:	f001 fe6d 	bl	8002c50 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f76:	f7ff faa3 	bl	80004c0 <main>
  bx lr
 8000f7a:	4770      	bx	lr
  ldr r0, =_sdata
 8000f7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f80:	20000048 	.word	0x20000048
  ldr r2, =_sidata
 8000f84:	08002ce8 	.word	0x08002ce8
  ldr r2, =_sbss
 8000f88:	20000048 	.word	0x20000048
  ldr r4, =_ebss
 8000f8c:	20000128 	.word	0x20000128

08000f90 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f90:	e7fe      	b.n	8000f90 <ADC1_2_IRQHandler>
	...

08000f94 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f98:	4b08      	ldr	r3, [pc, #32]	; (8000fbc <HAL_Init+0x28>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4a07      	ldr	r2, [pc, #28]	; (8000fbc <HAL_Init+0x28>)
 8000f9e:	f043 0310 	orr.w	r3, r3, #16
 8000fa2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fa4:	2003      	movs	r0, #3
 8000fa6:	f000 f923 	bl	80011f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000faa:	200f      	movs	r0, #15
 8000fac:	f000 f808 	bl	8000fc0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fb0:	f7ff fdd6 	bl	8000b60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fb4:	2300      	movs	r3, #0
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	40022000 	.word	0x40022000

08000fc0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b082      	sub	sp, #8
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fc8:	4b12      	ldr	r3, [pc, #72]	; (8001014 <HAL_InitTick+0x54>)
 8000fca:	681a      	ldr	r2, [r3, #0]
 8000fcc:	4b12      	ldr	r3, [pc, #72]	; (8001018 <HAL_InitTick+0x58>)
 8000fce:	781b      	ldrb	r3, [r3, #0]
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fd6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fda:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f000 f93b 	bl	800125a <HAL_SYSTICK_Config>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d001      	beq.n	8000fee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fea:	2301      	movs	r3, #1
 8000fec:	e00e      	b.n	800100c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	2b0f      	cmp	r3, #15
 8000ff2:	d80a      	bhi.n	800100a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	6879      	ldr	r1, [r7, #4]
 8000ff8:	f04f 30ff 	mov.w	r0, #4294967295
 8000ffc:	f000 f903 	bl	8001206 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001000:	4a06      	ldr	r2, [pc, #24]	; (800101c <HAL_InitTick+0x5c>)
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001006:	2300      	movs	r3, #0
 8001008:	e000      	b.n	800100c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800100a:	2301      	movs	r3, #1
}
 800100c:	4618      	mov	r0, r3
 800100e:	3708      	adds	r7, #8
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	2000003c 	.word	0x2000003c
 8001018:	20000044 	.word	0x20000044
 800101c:	20000040 	.word	0x20000040

08001020 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001024:	4b05      	ldr	r3, [pc, #20]	; (800103c <HAL_IncTick+0x1c>)
 8001026:	781b      	ldrb	r3, [r3, #0]
 8001028:	461a      	mov	r2, r3
 800102a:	4b05      	ldr	r3, [pc, #20]	; (8001040 <HAL_IncTick+0x20>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	4413      	add	r3, r2
 8001030:	4a03      	ldr	r2, [pc, #12]	; (8001040 <HAL_IncTick+0x20>)
 8001032:	6013      	str	r3, [r2, #0]
}
 8001034:	bf00      	nop
 8001036:	46bd      	mov	sp, r7
 8001038:	bc80      	pop	{r7}
 800103a:	4770      	bx	lr
 800103c:	20000044 	.word	0x20000044
 8001040:	20000124 	.word	0x20000124

08001044 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
  return uwTick;
 8001048:	4b02      	ldr	r3, [pc, #8]	; (8001054 <HAL_GetTick+0x10>)
 800104a:	681b      	ldr	r3, [r3, #0]
}
 800104c:	4618      	mov	r0, r3
 800104e:	46bd      	mov	sp, r7
 8001050:	bc80      	pop	{r7}
 8001052:	4770      	bx	lr
 8001054:	20000124 	.word	0x20000124

08001058 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001058:	b480      	push	{r7}
 800105a:	b085      	sub	sp, #20
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	f003 0307 	and.w	r3, r3, #7
 8001066:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001068:	4b0c      	ldr	r3, [pc, #48]	; (800109c <__NVIC_SetPriorityGrouping+0x44>)
 800106a:	68db      	ldr	r3, [r3, #12]
 800106c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800106e:	68ba      	ldr	r2, [r7, #8]
 8001070:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001074:	4013      	ands	r3, r2
 8001076:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800107c:	68bb      	ldr	r3, [r7, #8]
 800107e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001080:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001084:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001088:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800108a:	4a04      	ldr	r2, [pc, #16]	; (800109c <__NVIC_SetPriorityGrouping+0x44>)
 800108c:	68bb      	ldr	r3, [r7, #8]
 800108e:	60d3      	str	r3, [r2, #12]
}
 8001090:	bf00      	nop
 8001092:	3714      	adds	r7, #20
 8001094:	46bd      	mov	sp, r7
 8001096:	bc80      	pop	{r7}
 8001098:	4770      	bx	lr
 800109a:	bf00      	nop
 800109c:	e000ed00 	.word	0xe000ed00

080010a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010a4:	4b04      	ldr	r3, [pc, #16]	; (80010b8 <__NVIC_GetPriorityGrouping+0x18>)
 80010a6:	68db      	ldr	r3, [r3, #12]
 80010a8:	0a1b      	lsrs	r3, r3, #8
 80010aa:	f003 0307 	and.w	r3, r3, #7
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bc80      	pop	{r7}
 80010b4:	4770      	bx	lr
 80010b6:	bf00      	nop
 80010b8:	e000ed00 	.word	0xe000ed00

080010bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010bc:	b480      	push	{r7}
 80010be:	b083      	sub	sp, #12
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	4603      	mov	r3, r0
 80010c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	db0b      	blt.n	80010e6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010ce:	79fb      	ldrb	r3, [r7, #7]
 80010d0:	f003 021f 	and.w	r2, r3, #31
 80010d4:	4906      	ldr	r1, [pc, #24]	; (80010f0 <__NVIC_EnableIRQ+0x34>)
 80010d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010da:	095b      	lsrs	r3, r3, #5
 80010dc:	2001      	movs	r0, #1
 80010de:	fa00 f202 	lsl.w	r2, r0, r2
 80010e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80010e6:	bf00      	nop
 80010e8:	370c      	adds	r7, #12
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bc80      	pop	{r7}
 80010ee:	4770      	bx	lr
 80010f0:	e000e100 	.word	0xe000e100

080010f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010f4:	b480      	push	{r7}
 80010f6:	b083      	sub	sp, #12
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	4603      	mov	r3, r0
 80010fc:	6039      	str	r1, [r7, #0]
 80010fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001100:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001104:	2b00      	cmp	r3, #0
 8001106:	db0a      	blt.n	800111e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	b2da      	uxtb	r2, r3
 800110c:	490c      	ldr	r1, [pc, #48]	; (8001140 <__NVIC_SetPriority+0x4c>)
 800110e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001112:	0112      	lsls	r2, r2, #4
 8001114:	b2d2      	uxtb	r2, r2
 8001116:	440b      	add	r3, r1
 8001118:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800111c:	e00a      	b.n	8001134 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	b2da      	uxtb	r2, r3
 8001122:	4908      	ldr	r1, [pc, #32]	; (8001144 <__NVIC_SetPriority+0x50>)
 8001124:	79fb      	ldrb	r3, [r7, #7]
 8001126:	f003 030f 	and.w	r3, r3, #15
 800112a:	3b04      	subs	r3, #4
 800112c:	0112      	lsls	r2, r2, #4
 800112e:	b2d2      	uxtb	r2, r2
 8001130:	440b      	add	r3, r1
 8001132:	761a      	strb	r2, [r3, #24]
}
 8001134:	bf00      	nop
 8001136:	370c      	adds	r7, #12
 8001138:	46bd      	mov	sp, r7
 800113a:	bc80      	pop	{r7}
 800113c:	4770      	bx	lr
 800113e:	bf00      	nop
 8001140:	e000e100 	.word	0xe000e100
 8001144:	e000ed00 	.word	0xe000ed00

08001148 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001148:	b480      	push	{r7}
 800114a:	b089      	sub	sp, #36	; 0x24
 800114c:	af00      	add	r7, sp, #0
 800114e:	60f8      	str	r0, [r7, #12]
 8001150:	60b9      	str	r1, [r7, #8]
 8001152:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	f003 0307 	and.w	r3, r3, #7
 800115a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800115c:	69fb      	ldr	r3, [r7, #28]
 800115e:	f1c3 0307 	rsb	r3, r3, #7
 8001162:	2b04      	cmp	r3, #4
 8001164:	bf28      	it	cs
 8001166:	2304      	movcs	r3, #4
 8001168:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800116a:	69fb      	ldr	r3, [r7, #28]
 800116c:	3304      	adds	r3, #4
 800116e:	2b06      	cmp	r3, #6
 8001170:	d902      	bls.n	8001178 <NVIC_EncodePriority+0x30>
 8001172:	69fb      	ldr	r3, [r7, #28]
 8001174:	3b03      	subs	r3, #3
 8001176:	e000      	b.n	800117a <NVIC_EncodePriority+0x32>
 8001178:	2300      	movs	r3, #0
 800117a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800117c:	f04f 32ff 	mov.w	r2, #4294967295
 8001180:	69bb      	ldr	r3, [r7, #24]
 8001182:	fa02 f303 	lsl.w	r3, r2, r3
 8001186:	43da      	mvns	r2, r3
 8001188:	68bb      	ldr	r3, [r7, #8]
 800118a:	401a      	ands	r2, r3
 800118c:	697b      	ldr	r3, [r7, #20]
 800118e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001190:	f04f 31ff 	mov.w	r1, #4294967295
 8001194:	697b      	ldr	r3, [r7, #20]
 8001196:	fa01 f303 	lsl.w	r3, r1, r3
 800119a:	43d9      	mvns	r1, r3
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011a0:	4313      	orrs	r3, r2
         );
}
 80011a2:	4618      	mov	r0, r3
 80011a4:	3724      	adds	r7, #36	; 0x24
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bc80      	pop	{r7}
 80011aa:	4770      	bx	lr

080011ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	3b01      	subs	r3, #1
 80011b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011bc:	d301      	bcc.n	80011c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011be:	2301      	movs	r3, #1
 80011c0:	e00f      	b.n	80011e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011c2:	4a0a      	ldr	r2, [pc, #40]	; (80011ec <SysTick_Config+0x40>)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	3b01      	subs	r3, #1
 80011c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011ca:	210f      	movs	r1, #15
 80011cc:	f04f 30ff 	mov.w	r0, #4294967295
 80011d0:	f7ff ff90 	bl	80010f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011d4:	4b05      	ldr	r3, [pc, #20]	; (80011ec <SysTick_Config+0x40>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011da:	4b04      	ldr	r3, [pc, #16]	; (80011ec <SysTick_Config+0x40>)
 80011dc:	2207      	movs	r2, #7
 80011de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011e0:	2300      	movs	r3, #0
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	3708      	adds	r7, #8
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	e000e010 	.word	0xe000e010

080011f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011f8:	6878      	ldr	r0, [r7, #4]
 80011fa:	f7ff ff2d 	bl	8001058 <__NVIC_SetPriorityGrouping>
}
 80011fe:	bf00      	nop
 8001200:	3708      	adds	r7, #8
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}

08001206 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001206:	b580      	push	{r7, lr}
 8001208:	b086      	sub	sp, #24
 800120a:	af00      	add	r7, sp, #0
 800120c:	4603      	mov	r3, r0
 800120e:	60b9      	str	r1, [r7, #8]
 8001210:	607a      	str	r2, [r7, #4]
 8001212:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001214:	2300      	movs	r3, #0
 8001216:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001218:	f7ff ff42 	bl	80010a0 <__NVIC_GetPriorityGrouping>
 800121c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800121e:	687a      	ldr	r2, [r7, #4]
 8001220:	68b9      	ldr	r1, [r7, #8]
 8001222:	6978      	ldr	r0, [r7, #20]
 8001224:	f7ff ff90 	bl	8001148 <NVIC_EncodePriority>
 8001228:	4602      	mov	r2, r0
 800122a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800122e:	4611      	mov	r1, r2
 8001230:	4618      	mov	r0, r3
 8001232:	f7ff ff5f 	bl	80010f4 <__NVIC_SetPriority>
}
 8001236:	bf00      	nop
 8001238:	3718      	adds	r7, #24
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}

0800123e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800123e:	b580      	push	{r7, lr}
 8001240:	b082      	sub	sp, #8
 8001242:	af00      	add	r7, sp, #0
 8001244:	4603      	mov	r3, r0
 8001246:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001248:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800124c:	4618      	mov	r0, r3
 800124e:	f7ff ff35 	bl	80010bc <__NVIC_EnableIRQ>
}
 8001252:	bf00      	nop
 8001254:	3708      	adds	r7, #8
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}

0800125a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800125a:	b580      	push	{r7, lr}
 800125c:	b082      	sub	sp, #8
 800125e:	af00      	add	r7, sp, #0
 8001260:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001262:	6878      	ldr	r0, [r7, #4]
 8001264:	f7ff ffa2 	bl	80011ac <SysTick_Config>
 8001268:	4603      	mov	r3, r0
}
 800126a:	4618      	mov	r0, r3
 800126c:	3708      	adds	r7, #8
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
	...

08001274 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001274:	b480      	push	{r7}
 8001276:	b08b      	sub	sp, #44	; 0x2c
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
 800127c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800127e:	2300      	movs	r3, #0
 8001280:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001282:	2300      	movs	r3, #0
 8001284:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001286:	e169      	b.n	800155c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001288:	2201      	movs	r2, #1
 800128a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800128c:	fa02 f303 	lsl.w	r3, r2, r3
 8001290:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	69fa      	ldr	r2, [r7, #28]
 8001298:	4013      	ands	r3, r2
 800129a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800129c:	69ba      	ldr	r2, [r7, #24]
 800129e:	69fb      	ldr	r3, [r7, #28]
 80012a0:	429a      	cmp	r2, r3
 80012a2:	f040 8158 	bne.w	8001556 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	685b      	ldr	r3, [r3, #4]
 80012aa:	4a9a      	ldr	r2, [pc, #616]	; (8001514 <HAL_GPIO_Init+0x2a0>)
 80012ac:	4293      	cmp	r3, r2
 80012ae:	d05e      	beq.n	800136e <HAL_GPIO_Init+0xfa>
 80012b0:	4a98      	ldr	r2, [pc, #608]	; (8001514 <HAL_GPIO_Init+0x2a0>)
 80012b2:	4293      	cmp	r3, r2
 80012b4:	d875      	bhi.n	80013a2 <HAL_GPIO_Init+0x12e>
 80012b6:	4a98      	ldr	r2, [pc, #608]	; (8001518 <HAL_GPIO_Init+0x2a4>)
 80012b8:	4293      	cmp	r3, r2
 80012ba:	d058      	beq.n	800136e <HAL_GPIO_Init+0xfa>
 80012bc:	4a96      	ldr	r2, [pc, #600]	; (8001518 <HAL_GPIO_Init+0x2a4>)
 80012be:	4293      	cmp	r3, r2
 80012c0:	d86f      	bhi.n	80013a2 <HAL_GPIO_Init+0x12e>
 80012c2:	4a96      	ldr	r2, [pc, #600]	; (800151c <HAL_GPIO_Init+0x2a8>)
 80012c4:	4293      	cmp	r3, r2
 80012c6:	d052      	beq.n	800136e <HAL_GPIO_Init+0xfa>
 80012c8:	4a94      	ldr	r2, [pc, #592]	; (800151c <HAL_GPIO_Init+0x2a8>)
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d869      	bhi.n	80013a2 <HAL_GPIO_Init+0x12e>
 80012ce:	4a94      	ldr	r2, [pc, #592]	; (8001520 <HAL_GPIO_Init+0x2ac>)
 80012d0:	4293      	cmp	r3, r2
 80012d2:	d04c      	beq.n	800136e <HAL_GPIO_Init+0xfa>
 80012d4:	4a92      	ldr	r2, [pc, #584]	; (8001520 <HAL_GPIO_Init+0x2ac>)
 80012d6:	4293      	cmp	r3, r2
 80012d8:	d863      	bhi.n	80013a2 <HAL_GPIO_Init+0x12e>
 80012da:	4a92      	ldr	r2, [pc, #584]	; (8001524 <HAL_GPIO_Init+0x2b0>)
 80012dc:	4293      	cmp	r3, r2
 80012de:	d046      	beq.n	800136e <HAL_GPIO_Init+0xfa>
 80012e0:	4a90      	ldr	r2, [pc, #576]	; (8001524 <HAL_GPIO_Init+0x2b0>)
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d85d      	bhi.n	80013a2 <HAL_GPIO_Init+0x12e>
 80012e6:	2b12      	cmp	r3, #18
 80012e8:	d82a      	bhi.n	8001340 <HAL_GPIO_Init+0xcc>
 80012ea:	2b12      	cmp	r3, #18
 80012ec:	d859      	bhi.n	80013a2 <HAL_GPIO_Init+0x12e>
 80012ee:	a201      	add	r2, pc, #4	; (adr r2, 80012f4 <HAL_GPIO_Init+0x80>)
 80012f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012f4:	0800136f 	.word	0x0800136f
 80012f8:	08001349 	.word	0x08001349
 80012fc:	0800135b 	.word	0x0800135b
 8001300:	0800139d 	.word	0x0800139d
 8001304:	080013a3 	.word	0x080013a3
 8001308:	080013a3 	.word	0x080013a3
 800130c:	080013a3 	.word	0x080013a3
 8001310:	080013a3 	.word	0x080013a3
 8001314:	080013a3 	.word	0x080013a3
 8001318:	080013a3 	.word	0x080013a3
 800131c:	080013a3 	.word	0x080013a3
 8001320:	080013a3 	.word	0x080013a3
 8001324:	080013a3 	.word	0x080013a3
 8001328:	080013a3 	.word	0x080013a3
 800132c:	080013a3 	.word	0x080013a3
 8001330:	080013a3 	.word	0x080013a3
 8001334:	080013a3 	.word	0x080013a3
 8001338:	08001351 	.word	0x08001351
 800133c:	08001365 	.word	0x08001365
 8001340:	4a79      	ldr	r2, [pc, #484]	; (8001528 <HAL_GPIO_Init+0x2b4>)
 8001342:	4293      	cmp	r3, r2
 8001344:	d013      	beq.n	800136e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001346:	e02c      	b.n	80013a2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	68db      	ldr	r3, [r3, #12]
 800134c:	623b      	str	r3, [r7, #32]
          break;
 800134e:	e029      	b.n	80013a4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	68db      	ldr	r3, [r3, #12]
 8001354:	3304      	adds	r3, #4
 8001356:	623b      	str	r3, [r7, #32]
          break;
 8001358:	e024      	b.n	80013a4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	68db      	ldr	r3, [r3, #12]
 800135e:	3308      	adds	r3, #8
 8001360:	623b      	str	r3, [r7, #32]
          break;
 8001362:	e01f      	b.n	80013a4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	68db      	ldr	r3, [r3, #12]
 8001368:	330c      	adds	r3, #12
 800136a:	623b      	str	r3, [r7, #32]
          break;
 800136c:	e01a      	b.n	80013a4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	689b      	ldr	r3, [r3, #8]
 8001372:	2b00      	cmp	r3, #0
 8001374:	d102      	bne.n	800137c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001376:	2304      	movs	r3, #4
 8001378:	623b      	str	r3, [r7, #32]
          break;
 800137a:	e013      	b.n	80013a4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	689b      	ldr	r3, [r3, #8]
 8001380:	2b01      	cmp	r3, #1
 8001382:	d105      	bne.n	8001390 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001384:	2308      	movs	r3, #8
 8001386:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	69fa      	ldr	r2, [r7, #28]
 800138c:	611a      	str	r2, [r3, #16]
          break;
 800138e:	e009      	b.n	80013a4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001390:	2308      	movs	r3, #8
 8001392:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	69fa      	ldr	r2, [r7, #28]
 8001398:	615a      	str	r2, [r3, #20]
          break;
 800139a:	e003      	b.n	80013a4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800139c:	2300      	movs	r3, #0
 800139e:	623b      	str	r3, [r7, #32]
          break;
 80013a0:	e000      	b.n	80013a4 <HAL_GPIO_Init+0x130>
          break;
 80013a2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80013a4:	69bb      	ldr	r3, [r7, #24]
 80013a6:	2bff      	cmp	r3, #255	; 0xff
 80013a8:	d801      	bhi.n	80013ae <HAL_GPIO_Init+0x13a>
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	e001      	b.n	80013b2 <HAL_GPIO_Init+0x13e>
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	3304      	adds	r3, #4
 80013b2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80013b4:	69bb      	ldr	r3, [r7, #24]
 80013b6:	2bff      	cmp	r3, #255	; 0xff
 80013b8:	d802      	bhi.n	80013c0 <HAL_GPIO_Init+0x14c>
 80013ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013bc:	009b      	lsls	r3, r3, #2
 80013be:	e002      	b.n	80013c6 <HAL_GPIO_Init+0x152>
 80013c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013c2:	3b08      	subs	r3, #8
 80013c4:	009b      	lsls	r3, r3, #2
 80013c6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	681a      	ldr	r2, [r3, #0]
 80013cc:	210f      	movs	r1, #15
 80013ce:	693b      	ldr	r3, [r7, #16]
 80013d0:	fa01 f303 	lsl.w	r3, r1, r3
 80013d4:	43db      	mvns	r3, r3
 80013d6:	401a      	ands	r2, r3
 80013d8:	6a39      	ldr	r1, [r7, #32]
 80013da:	693b      	ldr	r3, [r7, #16]
 80013dc:	fa01 f303 	lsl.w	r3, r1, r3
 80013e0:	431a      	orrs	r2, r3
 80013e2:	697b      	ldr	r3, [r7, #20]
 80013e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	f000 80b1 	beq.w	8001556 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80013f4:	4b4d      	ldr	r3, [pc, #308]	; (800152c <HAL_GPIO_Init+0x2b8>)
 80013f6:	699b      	ldr	r3, [r3, #24]
 80013f8:	4a4c      	ldr	r2, [pc, #304]	; (800152c <HAL_GPIO_Init+0x2b8>)
 80013fa:	f043 0301 	orr.w	r3, r3, #1
 80013fe:	6193      	str	r3, [r2, #24]
 8001400:	4b4a      	ldr	r3, [pc, #296]	; (800152c <HAL_GPIO_Init+0x2b8>)
 8001402:	699b      	ldr	r3, [r3, #24]
 8001404:	f003 0301 	and.w	r3, r3, #1
 8001408:	60bb      	str	r3, [r7, #8]
 800140a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800140c:	4a48      	ldr	r2, [pc, #288]	; (8001530 <HAL_GPIO_Init+0x2bc>)
 800140e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001410:	089b      	lsrs	r3, r3, #2
 8001412:	3302      	adds	r3, #2
 8001414:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001418:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800141a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800141c:	f003 0303 	and.w	r3, r3, #3
 8001420:	009b      	lsls	r3, r3, #2
 8001422:	220f      	movs	r2, #15
 8001424:	fa02 f303 	lsl.w	r3, r2, r3
 8001428:	43db      	mvns	r3, r3
 800142a:	68fa      	ldr	r2, [r7, #12]
 800142c:	4013      	ands	r3, r2
 800142e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	4a40      	ldr	r2, [pc, #256]	; (8001534 <HAL_GPIO_Init+0x2c0>)
 8001434:	4293      	cmp	r3, r2
 8001436:	d013      	beq.n	8001460 <HAL_GPIO_Init+0x1ec>
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	4a3f      	ldr	r2, [pc, #252]	; (8001538 <HAL_GPIO_Init+0x2c4>)
 800143c:	4293      	cmp	r3, r2
 800143e:	d00d      	beq.n	800145c <HAL_GPIO_Init+0x1e8>
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	4a3e      	ldr	r2, [pc, #248]	; (800153c <HAL_GPIO_Init+0x2c8>)
 8001444:	4293      	cmp	r3, r2
 8001446:	d007      	beq.n	8001458 <HAL_GPIO_Init+0x1e4>
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	4a3d      	ldr	r2, [pc, #244]	; (8001540 <HAL_GPIO_Init+0x2cc>)
 800144c:	4293      	cmp	r3, r2
 800144e:	d101      	bne.n	8001454 <HAL_GPIO_Init+0x1e0>
 8001450:	2303      	movs	r3, #3
 8001452:	e006      	b.n	8001462 <HAL_GPIO_Init+0x1ee>
 8001454:	2304      	movs	r3, #4
 8001456:	e004      	b.n	8001462 <HAL_GPIO_Init+0x1ee>
 8001458:	2302      	movs	r3, #2
 800145a:	e002      	b.n	8001462 <HAL_GPIO_Init+0x1ee>
 800145c:	2301      	movs	r3, #1
 800145e:	e000      	b.n	8001462 <HAL_GPIO_Init+0x1ee>
 8001460:	2300      	movs	r3, #0
 8001462:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001464:	f002 0203 	and.w	r2, r2, #3
 8001468:	0092      	lsls	r2, r2, #2
 800146a:	4093      	lsls	r3, r2
 800146c:	68fa      	ldr	r2, [r7, #12]
 800146e:	4313      	orrs	r3, r2
 8001470:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001472:	492f      	ldr	r1, [pc, #188]	; (8001530 <HAL_GPIO_Init+0x2bc>)
 8001474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001476:	089b      	lsrs	r3, r3, #2
 8001478:	3302      	adds	r3, #2
 800147a:	68fa      	ldr	r2, [r7, #12]
 800147c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001488:	2b00      	cmp	r3, #0
 800148a:	d006      	beq.n	800149a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800148c:	4b2d      	ldr	r3, [pc, #180]	; (8001544 <HAL_GPIO_Init+0x2d0>)
 800148e:	681a      	ldr	r2, [r3, #0]
 8001490:	492c      	ldr	r1, [pc, #176]	; (8001544 <HAL_GPIO_Init+0x2d0>)
 8001492:	69bb      	ldr	r3, [r7, #24]
 8001494:	4313      	orrs	r3, r2
 8001496:	600b      	str	r3, [r1, #0]
 8001498:	e006      	b.n	80014a8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800149a:	4b2a      	ldr	r3, [pc, #168]	; (8001544 <HAL_GPIO_Init+0x2d0>)
 800149c:	681a      	ldr	r2, [r3, #0]
 800149e:	69bb      	ldr	r3, [r7, #24]
 80014a0:	43db      	mvns	r3, r3
 80014a2:	4928      	ldr	r1, [pc, #160]	; (8001544 <HAL_GPIO_Init+0x2d0>)
 80014a4:	4013      	ands	r3, r2
 80014a6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d006      	beq.n	80014c2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80014b4:	4b23      	ldr	r3, [pc, #140]	; (8001544 <HAL_GPIO_Init+0x2d0>)
 80014b6:	685a      	ldr	r2, [r3, #4]
 80014b8:	4922      	ldr	r1, [pc, #136]	; (8001544 <HAL_GPIO_Init+0x2d0>)
 80014ba:	69bb      	ldr	r3, [r7, #24]
 80014bc:	4313      	orrs	r3, r2
 80014be:	604b      	str	r3, [r1, #4]
 80014c0:	e006      	b.n	80014d0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80014c2:	4b20      	ldr	r3, [pc, #128]	; (8001544 <HAL_GPIO_Init+0x2d0>)
 80014c4:	685a      	ldr	r2, [r3, #4]
 80014c6:	69bb      	ldr	r3, [r7, #24]
 80014c8:	43db      	mvns	r3, r3
 80014ca:	491e      	ldr	r1, [pc, #120]	; (8001544 <HAL_GPIO_Init+0x2d0>)
 80014cc:	4013      	ands	r3, r2
 80014ce:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d006      	beq.n	80014ea <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80014dc:	4b19      	ldr	r3, [pc, #100]	; (8001544 <HAL_GPIO_Init+0x2d0>)
 80014de:	689a      	ldr	r2, [r3, #8]
 80014e0:	4918      	ldr	r1, [pc, #96]	; (8001544 <HAL_GPIO_Init+0x2d0>)
 80014e2:	69bb      	ldr	r3, [r7, #24]
 80014e4:	4313      	orrs	r3, r2
 80014e6:	608b      	str	r3, [r1, #8]
 80014e8:	e006      	b.n	80014f8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80014ea:	4b16      	ldr	r3, [pc, #88]	; (8001544 <HAL_GPIO_Init+0x2d0>)
 80014ec:	689a      	ldr	r2, [r3, #8]
 80014ee:	69bb      	ldr	r3, [r7, #24]
 80014f0:	43db      	mvns	r3, r3
 80014f2:	4914      	ldr	r1, [pc, #80]	; (8001544 <HAL_GPIO_Init+0x2d0>)
 80014f4:	4013      	ands	r3, r2
 80014f6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001500:	2b00      	cmp	r3, #0
 8001502:	d021      	beq.n	8001548 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001504:	4b0f      	ldr	r3, [pc, #60]	; (8001544 <HAL_GPIO_Init+0x2d0>)
 8001506:	68da      	ldr	r2, [r3, #12]
 8001508:	490e      	ldr	r1, [pc, #56]	; (8001544 <HAL_GPIO_Init+0x2d0>)
 800150a:	69bb      	ldr	r3, [r7, #24]
 800150c:	4313      	orrs	r3, r2
 800150e:	60cb      	str	r3, [r1, #12]
 8001510:	e021      	b.n	8001556 <HAL_GPIO_Init+0x2e2>
 8001512:	bf00      	nop
 8001514:	10320000 	.word	0x10320000
 8001518:	10310000 	.word	0x10310000
 800151c:	10220000 	.word	0x10220000
 8001520:	10210000 	.word	0x10210000
 8001524:	10120000 	.word	0x10120000
 8001528:	10110000 	.word	0x10110000
 800152c:	40021000 	.word	0x40021000
 8001530:	40010000 	.word	0x40010000
 8001534:	40010800 	.word	0x40010800
 8001538:	40010c00 	.word	0x40010c00
 800153c:	40011000 	.word	0x40011000
 8001540:	40011400 	.word	0x40011400
 8001544:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001548:	4b0b      	ldr	r3, [pc, #44]	; (8001578 <HAL_GPIO_Init+0x304>)
 800154a:	68da      	ldr	r2, [r3, #12]
 800154c:	69bb      	ldr	r3, [r7, #24]
 800154e:	43db      	mvns	r3, r3
 8001550:	4909      	ldr	r1, [pc, #36]	; (8001578 <HAL_GPIO_Init+0x304>)
 8001552:	4013      	ands	r3, r2
 8001554:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001558:	3301      	adds	r3, #1
 800155a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	681a      	ldr	r2, [r3, #0]
 8001560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001562:	fa22 f303 	lsr.w	r3, r2, r3
 8001566:	2b00      	cmp	r3, #0
 8001568:	f47f ae8e 	bne.w	8001288 <HAL_GPIO_Init+0x14>
  }
}
 800156c:	bf00      	nop
 800156e:	bf00      	nop
 8001570:	372c      	adds	r7, #44	; 0x2c
 8001572:	46bd      	mov	sp, r7
 8001574:	bc80      	pop	{r7}
 8001576:	4770      	bx	lr
 8001578:	40010400 	.word	0x40010400

0800157c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800157c:	b480      	push	{r7}
 800157e:	b085      	sub	sp, #20
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
 8001584:	460b      	mov	r3, r1
 8001586:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	689a      	ldr	r2, [r3, #8]
 800158c:	887b      	ldrh	r3, [r7, #2]
 800158e:	4013      	ands	r3, r2
 8001590:	2b00      	cmp	r3, #0
 8001592:	d002      	beq.n	800159a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001594:	2301      	movs	r3, #1
 8001596:	73fb      	strb	r3, [r7, #15]
 8001598:	e001      	b.n	800159e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800159a:	2300      	movs	r3, #0
 800159c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800159e:	7bfb      	ldrb	r3, [r7, #15]
}
 80015a0:	4618      	mov	r0, r3
 80015a2:	3714      	adds	r7, #20
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bc80      	pop	{r7}
 80015a8:	4770      	bx	lr

080015aa <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015aa:	b480      	push	{r7}
 80015ac:	b083      	sub	sp, #12
 80015ae:	af00      	add	r7, sp, #0
 80015b0:	6078      	str	r0, [r7, #4]
 80015b2:	460b      	mov	r3, r1
 80015b4:	807b      	strh	r3, [r7, #2]
 80015b6:	4613      	mov	r3, r2
 80015b8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80015ba:	787b      	ldrb	r3, [r7, #1]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d003      	beq.n	80015c8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80015c0:	887a      	ldrh	r2, [r7, #2]
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80015c6:	e003      	b.n	80015d0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80015c8:	887b      	ldrh	r3, [r7, #2]
 80015ca:	041a      	lsls	r2, r3, #16
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	611a      	str	r2, [r3, #16]
}
 80015d0:	bf00      	nop
 80015d2:	370c      	adds	r7, #12
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bc80      	pop	{r7}
 80015d8:	4770      	bx	lr
	...

080015dc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b086      	sub	sp, #24
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d101      	bne.n	80015ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80015ea:	2301      	movs	r3, #1
 80015ec:	e26c      	b.n	8001ac8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f003 0301 	and.w	r3, r3, #1
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	f000 8087 	beq.w	800170a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80015fc:	4b92      	ldr	r3, [pc, #584]	; (8001848 <HAL_RCC_OscConfig+0x26c>)
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	f003 030c 	and.w	r3, r3, #12
 8001604:	2b04      	cmp	r3, #4
 8001606:	d00c      	beq.n	8001622 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001608:	4b8f      	ldr	r3, [pc, #572]	; (8001848 <HAL_RCC_OscConfig+0x26c>)
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	f003 030c 	and.w	r3, r3, #12
 8001610:	2b08      	cmp	r3, #8
 8001612:	d112      	bne.n	800163a <HAL_RCC_OscConfig+0x5e>
 8001614:	4b8c      	ldr	r3, [pc, #560]	; (8001848 <HAL_RCC_OscConfig+0x26c>)
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800161c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001620:	d10b      	bne.n	800163a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001622:	4b89      	ldr	r3, [pc, #548]	; (8001848 <HAL_RCC_OscConfig+0x26c>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800162a:	2b00      	cmp	r3, #0
 800162c:	d06c      	beq.n	8001708 <HAL_RCC_OscConfig+0x12c>
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d168      	bne.n	8001708 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001636:	2301      	movs	r3, #1
 8001638:	e246      	b.n	8001ac8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001642:	d106      	bne.n	8001652 <HAL_RCC_OscConfig+0x76>
 8001644:	4b80      	ldr	r3, [pc, #512]	; (8001848 <HAL_RCC_OscConfig+0x26c>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4a7f      	ldr	r2, [pc, #508]	; (8001848 <HAL_RCC_OscConfig+0x26c>)
 800164a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800164e:	6013      	str	r3, [r2, #0]
 8001650:	e02e      	b.n	80016b0 <HAL_RCC_OscConfig+0xd4>
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	2b00      	cmp	r3, #0
 8001658:	d10c      	bne.n	8001674 <HAL_RCC_OscConfig+0x98>
 800165a:	4b7b      	ldr	r3, [pc, #492]	; (8001848 <HAL_RCC_OscConfig+0x26c>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	4a7a      	ldr	r2, [pc, #488]	; (8001848 <HAL_RCC_OscConfig+0x26c>)
 8001660:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001664:	6013      	str	r3, [r2, #0]
 8001666:	4b78      	ldr	r3, [pc, #480]	; (8001848 <HAL_RCC_OscConfig+0x26c>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	4a77      	ldr	r2, [pc, #476]	; (8001848 <HAL_RCC_OscConfig+0x26c>)
 800166c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001670:	6013      	str	r3, [r2, #0]
 8001672:	e01d      	b.n	80016b0 <HAL_RCC_OscConfig+0xd4>
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800167c:	d10c      	bne.n	8001698 <HAL_RCC_OscConfig+0xbc>
 800167e:	4b72      	ldr	r3, [pc, #456]	; (8001848 <HAL_RCC_OscConfig+0x26c>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4a71      	ldr	r2, [pc, #452]	; (8001848 <HAL_RCC_OscConfig+0x26c>)
 8001684:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001688:	6013      	str	r3, [r2, #0]
 800168a:	4b6f      	ldr	r3, [pc, #444]	; (8001848 <HAL_RCC_OscConfig+0x26c>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4a6e      	ldr	r2, [pc, #440]	; (8001848 <HAL_RCC_OscConfig+0x26c>)
 8001690:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001694:	6013      	str	r3, [r2, #0]
 8001696:	e00b      	b.n	80016b0 <HAL_RCC_OscConfig+0xd4>
 8001698:	4b6b      	ldr	r3, [pc, #428]	; (8001848 <HAL_RCC_OscConfig+0x26c>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4a6a      	ldr	r2, [pc, #424]	; (8001848 <HAL_RCC_OscConfig+0x26c>)
 800169e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016a2:	6013      	str	r3, [r2, #0]
 80016a4:	4b68      	ldr	r3, [pc, #416]	; (8001848 <HAL_RCC_OscConfig+0x26c>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4a67      	ldr	r2, [pc, #412]	; (8001848 <HAL_RCC_OscConfig+0x26c>)
 80016aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016ae:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d013      	beq.n	80016e0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016b8:	f7ff fcc4 	bl	8001044 <HAL_GetTick>
 80016bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016be:	e008      	b.n	80016d2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016c0:	f7ff fcc0 	bl	8001044 <HAL_GetTick>
 80016c4:	4602      	mov	r2, r0
 80016c6:	693b      	ldr	r3, [r7, #16]
 80016c8:	1ad3      	subs	r3, r2, r3
 80016ca:	2b64      	cmp	r3, #100	; 0x64
 80016cc:	d901      	bls.n	80016d2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80016ce:	2303      	movs	r3, #3
 80016d0:	e1fa      	b.n	8001ac8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016d2:	4b5d      	ldr	r3, [pc, #372]	; (8001848 <HAL_RCC_OscConfig+0x26c>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d0f0      	beq.n	80016c0 <HAL_RCC_OscConfig+0xe4>
 80016de:	e014      	b.n	800170a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016e0:	f7ff fcb0 	bl	8001044 <HAL_GetTick>
 80016e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016e6:	e008      	b.n	80016fa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016e8:	f7ff fcac 	bl	8001044 <HAL_GetTick>
 80016ec:	4602      	mov	r2, r0
 80016ee:	693b      	ldr	r3, [r7, #16]
 80016f0:	1ad3      	subs	r3, r2, r3
 80016f2:	2b64      	cmp	r3, #100	; 0x64
 80016f4:	d901      	bls.n	80016fa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80016f6:	2303      	movs	r3, #3
 80016f8:	e1e6      	b.n	8001ac8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016fa:	4b53      	ldr	r3, [pc, #332]	; (8001848 <HAL_RCC_OscConfig+0x26c>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001702:	2b00      	cmp	r3, #0
 8001704:	d1f0      	bne.n	80016e8 <HAL_RCC_OscConfig+0x10c>
 8001706:	e000      	b.n	800170a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001708:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f003 0302 	and.w	r3, r3, #2
 8001712:	2b00      	cmp	r3, #0
 8001714:	d063      	beq.n	80017de <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001716:	4b4c      	ldr	r3, [pc, #304]	; (8001848 <HAL_RCC_OscConfig+0x26c>)
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	f003 030c 	and.w	r3, r3, #12
 800171e:	2b00      	cmp	r3, #0
 8001720:	d00b      	beq.n	800173a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001722:	4b49      	ldr	r3, [pc, #292]	; (8001848 <HAL_RCC_OscConfig+0x26c>)
 8001724:	685b      	ldr	r3, [r3, #4]
 8001726:	f003 030c 	and.w	r3, r3, #12
 800172a:	2b08      	cmp	r3, #8
 800172c:	d11c      	bne.n	8001768 <HAL_RCC_OscConfig+0x18c>
 800172e:	4b46      	ldr	r3, [pc, #280]	; (8001848 <HAL_RCC_OscConfig+0x26c>)
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001736:	2b00      	cmp	r3, #0
 8001738:	d116      	bne.n	8001768 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800173a:	4b43      	ldr	r3, [pc, #268]	; (8001848 <HAL_RCC_OscConfig+0x26c>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f003 0302 	and.w	r3, r3, #2
 8001742:	2b00      	cmp	r3, #0
 8001744:	d005      	beq.n	8001752 <HAL_RCC_OscConfig+0x176>
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	691b      	ldr	r3, [r3, #16]
 800174a:	2b01      	cmp	r3, #1
 800174c:	d001      	beq.n	8001752 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800174e:	2301      	movs	r3, #1
 8001750:	e1ba      	b.n	8001ac8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001752:	4b3d      	ldr	r3, [pc, #244]	; (8001848 <HAL_RCC_OscConfig+0x26c>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	695b      	ldr	r3, [r3, #20]
 800175e:	00db      	lsls	r3, r3, #3
 8001760:	4939      	ldr	r1, [pc, #228]	; (8001848 <HAL_RCC_OscConfig+0x26c>)
 8001762:	4313      	orrs	r3, r2
 8001764:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001766:	e03a      	b.n	80017de <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	691b      	ldr	r3, [r3, #16]
 800176c:	2b00      	cmp	r3, #0
 800176e:	d020      	beq.n	80017b2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001770:	4b36      	ldr	r3, [pc, #216]	; (800184c <HAL_RCC_OscConfig+0x270>)
 8001772:	2201      	movs	r2, #1
 8001774:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001776:	f7ff fc65 	bl	8001044 <HAL_GetTick>
 800177a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800177c:	e008      	b.n	8001790 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800177e:	f7ff fc61 	bl	8001044 <HAL_GetTick>
 8001782:	4602      	mov	r2, r0
 8001784:	693b      	ldr	r3, [r7, #16]
 8001786:	1ad3      	subs	r3, r2, r3
 8001788:	2b02      	cmp	r3, #2
 800178a:	d901      	bls.n	8001790 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800178c:	2303      	movs	r3, #3
 800178e:	e19b      	b.n	8001ac8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001790:	4b2d      	ldr	r3, [pc, #180]	; (8001848 <HAL_RCC_OscConfig+0x26c>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f003 0302 	and.w	r3, r3, #2
 8001798:	2b00      	cmp	r3, #0
 800179a:	d0f0      	beq.n	800177e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800179c:	4b2a      	ldr	r3, [pc, #168]	; (8001848 <HAL_RCC_OscConfig+0x26c>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	695b      	ldr	r3, [r3, #20]
 80017a8:	00db      	lsls	r3, r3, #3
 80017aa:	4927      	ldr	r1, [pc, #156]	; (8001848 <HAL_RCC_OscConfig+0x26c>)
 80017ac:	4313      	orrs	r3, r2
 80017ae:	600b      	str	r3, [r1, #0]
 80017b0:	e015      	b.n	80017de <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017b2:	4b26      	ldr	r3, [pc, #152]	; (800184c <HAL_RCC_OscConfig+0x270>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017b8:	f7ff fc44 	bl	8001044 <HAL_GetTick>
 80017bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017be:	e008      	b.n	80017d2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017c0:	f7ff fc40 	bl	8001044 <HAL_GetTick>
 80017c4:	4602      	mov	r2, r0
 80017c6:	693b      	ldr	r3, [r7, #16]
 80017c8:	1ad3      	subs	r3, r2, r3
 80017ca:	2b02      	cmp	r3, #2
 80017cc:	d901      	bls.n	80017d2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80017ce:	2303      	movs	r3, #3
 80017d0:	e17a      	b.n	8001ac8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017d2:	4b1d      	ldr	r3, [pc, #116]	; (8001848 <HAL_RCC_OscConfig+0x26c>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f003 0302 	and.w	r3, r3, #2
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d1f0      	bne.n	80017c0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f003 0308 	and.w	r3, r3, #8
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d03a      	beq.n	8001860 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	699b      	ldr	r3, [r3, #24]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d019      	beq.n	8001826 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017f2:	4b17      	ldr	r3, [pc, #92]	; (8001850 <HAL_RCC_OscConfig+0x274>)
 80017f4:	2201      	movs	r2, #1
 80017f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017f8:	f7ff fc24 	bl	8001044 <HAL_GetTick>
 80017fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017fe:	e008      	b.n	8001812 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001800:	f7ff fc20 	bl	8001044 <HAL_GetTick>
 8001804:	4602      	mov	r2, r0
 8001806:	693b      	ldr	r3, [r7, #16]
 8001808:	1ad3      	subs	r3, r2, r3
 800180a:	2b02      	cmp	r3, #2
 800180c:	d901      	bls.n	8001812 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800180e:	2303      	movs	r3, #3
 8001810:	e15a      	b.n	8001ac8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001812:	4b0d      	ldr	r3, [pc, #52]	; (8001848 <HAL_RCC_OscConfig+0x26c>)
 8001814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001816:	f003 0302 	and.w	r3, r3, #2
 800181a:	2b00      	cmp	r3, #0
 800181c:	d0f0      	beq.n	8001800 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800181e:	2001      	movs	r0, #1
 8001820:	f000 faa6 	bl	8001d70 <RCC_Delay>
 8001824:	e01c      	b.n	8001860 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001826:	4b0a      	ldr	r3, [pc, #40]	; (8001850 <HAL_RCC_OscConfig+0x274>)
 8001828:	2200      	movs	r2, #0
 800182a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800182c:	f7ff fc0a 	bl	8001044 <HAL_GetTick>
 8001830:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001832:	e00f      	b.n	8001854 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001834:	f7ff fc06 	bl	8001044 <HAL_GetTick>
 8001838:	4602      	mov	r2, r0
 800183a:	693b      	ldr	r3, [r7, #16]
 800183c:	1ad3      	subs	r3, r2, r3
 800183e:	2b02      	cmp	r3, #2
 8001840:	d908      	bls.n	8001854 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001842:	2303      	movs	r3, #3
 8001844:	e140      	b.n	8001ac8 <HAL_RCC_OscConfig+0x4ec>
 8001846:	bf00      	nop
 8001848:	40021000 	.word	0x40021000
 800184c:	42420000 	.word	0x42420000
 8001850:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001854:	4b9e      	ldr	r3, [pc, #632]	; (8001ad0 <HAL_RCC_OscConfig+0x4f4>)
 8001856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001858:	f003 0302 	and.w	r3, r3, #2
 800185c:	2b00      	cmp	r3, #0
 800185e:	d1e9      	bne.n	8001834 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f003 0304 	and.w	r3, r3, #4
 8001868:	2b00      	cmp	r3, #0
 800186a:	f000 80a6 	beq.w	80019ba <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800186e:	2300      	movs	r3, #0
 8001870:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001872:	4b97      	ldr	r3, [pc, #604]	; (8001ad0 <HAL_RCC_OscConfig+0x4f4>)
 8001874:	69db      	ldr	r3, [r3, #28]
 8001876:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800187a:	2b00      	cmp	r3, #0
 800187c:	d10d      	bne.n	800189a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800187e:	4b94      	ldr	r3, [pc, #592]	; (8001ad0 <HAL_RCC_OscConfig+0x4f4>)
 8001880:	69db      	ldr	r3, [r3, #28]
 8001882:	4a93      	ldr	r2, [pc, #588]	; (8001ad0 <HAL_RCC_OscConfig+0x4f4>)
 8001884:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001888:	61d3      	str	r3, [r2, #28]
 800188a:	4b91      	ldr	r3, [pc, #580]	; (8001ad0 <HAL_RCC_OscConfig+0x4f4>)
 800188c:	69db      	ldr	r3, [r3, #28]
 800188e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001892:	60bb      	str	r3, [r7, #8]
 8001894:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001896:	2301      	movs	r3, #1
 8001898:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800189a:	4b8e      	ldr	r3, [pc, #568]	; (8001ad4 <HAL_RCC_OscConfig+0x4f8>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d118      	bne.n	80018d8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80018a6:	4b8b      	ldr	r3, [pc, #556]	; (8001ad4 <HAL_RCC_OscConfig+0x4f8>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4a8a      	ldr	r2, [pc, #552]	; (8001ad4 <HAL_RCC_OscConfig+0x4f8>)
 80018ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018b2:	f7ff fbc7 	bl	8001044 <HAL_GetTick>
 80018b6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018b8:	e008      	b.n	80018cc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018ba:	f7ff fbc3 	bl	8001044 <HAL_GetTick>
 80018be:	4602      	mov	r2, r0
 80018c0:	693b      	ldr	r3, [r7, #16]
 80018c2:	1ad3      	subs	r3, r2, r3
 80018c4:	2b64      	cmp	r3, #100	; 0x64
 80018c6:	d901      	bls.n	80018cc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80018c8:	2303      	movs	r3, #3
 80018ca:	e0fd      	b.n	8001ac8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018cc:	4b81      	ldr	r3, [pc, #516]	; (8001ad4 <HAL_RCC_OscConfig+0x4f8>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d0f0      	beq.n	80018ba <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	68db      	ldr	r3, [r3, #12]
 80018dc:	2b01      	cmp	r3, #1
 80018de:	d106      	bne.n	80018ee <HAL_RCC_OscConfig+0x312>
 80018e0:	4b7b      	ldr	r3, [pc, #492]	; (8001ad0 <HAL_RCC_OscConfig+0x4f4>)
 80018e2:	6a1b      	ldr	r3, [r3, #32]
 80018e4:	4a7a      	ldr	r2, [pc, #488]	; (8001ad0 <HAL_RCC_OscConfig+0x4f4>)
 80018e6:	f043 0301 	orr.w	r3, r3, #1
 80018ea:	6213      	str	r3, [r2, #32]
 80018ec:	e02d      	b.n	800194a <HAL_RCC_OscConfig+0x36e>
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	68db      	ldr	r3, [r3, #12]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d10c      	bne.n	8001910 <HAL_RCC_OscConfig+0x334>
 80018f6:	4b76      	ldr	r3, [pc, #472]	; (8001ad0 <HAL_RCC_OscConfig+0x4f4>)
 80018f8:	6a1b      	ldr	r3, [r3, #32]
 80018fa:	4a75      	ldr	r2, [pc, #468]	; (8001ad0 <HAL_RCC_OscConfig+0x4f4>)
 80018fc:	f023 0301 	bic.w	r3, r3, #1
 8001900:	6213      	str	r3, [r2, #32]
 8001902:	4b73      	ldr	r3, [pc, #460]	; (8001ad0 <HAL_RCC_OscConfig+0x4f4>)
 8001904:	6a1b      	ldr	r3, [r3, #32]
 8001906:	4a72      	ldr	r2, [pc, #456]	; (8001ad0 <HAL_RCC_OscConfig+0x4f4>)
 8001908:	f023 0304 	bic.w	r3, r3, #4
 800190c:	6213      	str	r3, [r2, #32]
 800190e:	e01c      	b.n	800194a <HAL_RCC_OscConfig+0x36e>
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	68db      	ldr	r3, [r3, #12]
 8001914:	2b05      	cmp	r3, #5
 8001916:	d10c      	bne.n	8001932 <HAL_RCC_OscConfig+0x356>
 8001918:	4b6d      	ldr	r3, [pc, #436]	; (8001ad0 <HAL_RCC_OscConfig+0x4f4>)
 800191a:	6a1b      	ldr	r3, [r3, #32]
 800191c:	4a6c      	ldr	r2, [pc, #432]	; (8001ad0 <HAL_RCC_OscConfig+0x4f4>)
 800191e:	f043 0304 	orr.w	r3, r3, #4
 8001922:	6213      	str	r3, [r2, #32]
 8001924:	4b6a      	ldr	r3, [pc, #424]	; (8001ad0 <HAL_RCC_OscConfig+0x4f4>)
 8001926:	6a1b      	ldr	r3, [r3, #32]
 8001928:	4a69      	ldr	r2, [pc, #420]	; (8001ad0 <HAL_RCC_OscConfig+0x4f4>)
 800192a:	f043 0301 	orr.w	r3, r3, #1
 800192e:	6213      	str	r3, [r2, #32]
 8001930:	e00b      	b.n	800194a <HAL_RCC_OscConfig+0x36e>
 8001932:	4b67      	ldr	r3, [pc, #412]	; (8001ad0 <HAL_RCC_OscConfig+0x4f4>)
 8001934:	6a1b      	ldr	r3, [r3, #32]
 8001936:	4a66      	ldr	r2, [pc, #408]	; (8001ad0 <HAL_RCC_OscConfig+0x4f4>)
 8001938:	f023 0301 	bic.w	r3, r3, #1
 800193c:	6213      	str	r3, [r2, #32]
 800193e:	4b64      	ldr	r3, [pc, #400]	; (8001ad0 <HAL_RCC_OscConfig+0x4f4>)
 8001940:	6a1b      	ldr	r3, [r3, #32]
 8001942:	4a63      	ldr	r2, [pc, #396]	; (8001ad0 <HAL_RCC_OscConfig+0x4f4>)
 8001944:	f023 0304 	bic.w	r3, r3, #4
 8001948:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	68db      	ldr	r3, [r3, #12]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d015      	beq.n	800197e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001952:	f7ff fb77 	bl	8001044 <HAL_GetTick>
 8001956:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001958:	e00a      	b.n	8001970 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800195a:	f7ff fb73 	bl	8001044 <HAL_GetTick>
 800195e:	4602      	mov	r2, r0
 8001960:	693b      	ldr	r3, [r7, #16]
 8001962:	1ad3      	subs	r3, r2, r3
 8001964:	f241 3288 	movw	r2, #5000	; 0x1388
 8001968:	4293      	cmp	r3, r2
 800196a:	d901      	bls.n	8001970 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800196c:	2303      	movs	r3, #3
 800196e:	e0ab      	b.n	8001ac8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001970:	4b57      	ldr	r3, [pc, #348]	; (8001ad0 <HAL_RCC_OscConfig+0x4f4>)
 8001972:	6a1b      	ldr	r3, [r3, #32]
 8001974:	f003 0302 	and.w	r3, r3, #2
 8001978:	2b00      	cmp	r3, #0
 800197a:	d0ee      	beq.n	800195a <HAL_RCC_OscConfig+0x37e>
 800197c:	e014      	b.n	80019a8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800197e:	f7ff fb61 	bl	8001044 <HAL_GetTick>
 8001982:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001984:	e00a      	b.n	800199c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001986:	f7ff fb5d 	bl	8001044 <HAL_GetTick>
 800198a:	4602      	mov	r2, r0
 800198c:	693b      	ldr	r3, [r7, #16]
 800198e:	1ad3      	subs	r3, r2, r3
 8001990:	f241 3288 	movw	r2, #5000	; 0x1388
 8001994:	4293      	cmp	r3, r2
 8001996:	d901      	bls.n	800199c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001998:	2303      	movs	r3, #3
 800199a:	e095      	b.n	8001ac8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800199c:	4b4c      	ldr	r3, [pc, #304]	; (8001ad0 <HAL_RCC_OscConfig+0x4f4>)
 800199e:	6a1b      	ldr	r3, [r3, #32]
 80019a0:	f003 0302 	and.w	r3, r3, #2
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d1ee      	bne.n	8001986 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80019a8:	7dfb      	ldrb	r3, [r7, #23]
 80019aa:	2b01      	cmp	r3, #1
 80019ac:	d105      	bne.n	80019ba <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019ae:	4b48      	ldr	r3, [pc, #288]	; (8001ad0 <HAL_RCC_OscConfig+0x4f4>)
 80019b0:	69db      	ldr	r3, [r3, #28]
 80019b2:	4a47      	ldr	r2, [pc, #284]	; (8001ad0 <HAL_RCC_OscConfig+0x4f4>)
 80019b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019b8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	69db      	ldr	r3, [r3, #28]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	f000 8081 	beq.w	8001ac6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80019c4:	4b42      	ldr	r3, [pc, #264]	; (8001ad0 <HAL_RCC_OscConfig+0x4f4>)
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	f003 030c 	and.w	r3, r3, #12
 80019cc:	2b08      	cmp	r3, #8
 80019ce:	d061      	beq.n	8001a94 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	69db      	ldr	r3, [r3, #28]
 80019d4:	2b02      	cmp	r3, #2
 80019d6:	d146      	bne.n	8001a66 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019d8:	4b3f      	ldr	r3, [pc, #252]	; (8001ad8 <HAL_RCC_OscConfig+0x4fc>)
 80019da:	2200      	movs	r2, #0
 80019dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019de:	f7ff fb31 	bl	8001044 <HAL_GetTick>
 80019e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019e4:	e008      	b.n	80019f8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019e6:	f7ff fb2d 	bl	8001044 <HAL_GetTick>
 80019ea:	4602      	mov	r2, r0
 80019ec:	693b      	ldr	r3, [r7, #16]
 80019ee:	1ad3      	subs	r3, r2, r3
 80019f0:	2b02      	cmp	r3, #2
 80019f2:	d901      	bls.n	80019f8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80019f4:	2303      	movs	r3, #3
 80019f6:	e067      	b.n	8001ac8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019f8:	4b35      	ldr	r3, [pc, #212]	; (8001ad0 <HAL_RCC_OscConfig+0x4f4>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d1f0      	bne.n	80019e6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6a1b      	ldr	r3, [r3, #32]
 8001a08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a0c:	d108      	bne.n	8001a20 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001a0e:	4b30      	ldr	r3, [pc, #192]	; (8001ad0 <HAL_RCC_OscConfig+0x4f4>)
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	689b      	ldr	r3, [r3, #8]
 8001a1a:	492d      	ldr	r1, [pc, #180]	; (8001ad0 <HAL_RCC_OscConfig+0x4f4>)
 8001a1c:	4313      	orrs	r3, r2
 8001a1e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a20:	4b2b      	ldr	r3, [pc, #172]	; (8001ad0 <HAL_RCC_OscConfig+0x4f4>)
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6a19      	ldr	r1, [r3, #32]
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a30:	430b      	orrs	r3, r1
 8001a32:	4927      	ldr	r1, [pc, #156]	; (8001ad0 <HAL_RCC_OscConfig+0x4f4>)
 8001a34:	4313      	orrs	r3, r2
 8001a36:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a38:	4b27      	ldr	r3, [pc, #156]	; (8001ad8 <HAL_RCC_OscConfig+0x4fc>)
 8001a3a:	2201      	movs	r2, #1
 8001a3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a3e:	f7ff fb01 	bl	8001044 <HAL_GetTick>
 8001a42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a44:	e008      	b.n	8001a58 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a46:	f7ff fafd 	bl	8001044 <HAL_GetTick>
 8001a4a:	4602      	mov	r2, r0
 8001a4c:	693b      	ldr	r3, [r7, #16]
 8001a4e:	1ad3      	subs	r3, r2, r3
 8001a50:	2b02      	cmp	r3, #2
 8001a52:	d901      	bls.n	8001a58 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001a54:	2303      	movs	r3, #3
 8001a56:	e037      	b.n	8001ac8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a58:	4b1d      	ldr	r3, [pc, #116]	; (8001ad0 <HAL_RCC_OscConfig+0x4f4>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d0f0      	beq.n	8001a46 <HAL_RCC_OscConfig+0x46a>
 8001a64:	e02f      	b.n	8001ac6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a66:	4b1c      	ldr	r3, [pc, #112]	; (8001ad8 <HAL_RCC_OscConfig+0x4fc>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a6c:	f7ff faea 	bl	8001044 <HAL_GetTick>
 8001a70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a72:	e008      	b.n	8001a86 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a74:	f7ff fae6 	bl	8001044 <HAL_GetTick>
 8001a78:	4602      	mov	r2, r0
 8001a7a:	693b      	ldr	r3, [r7, #16]
 8001a7c:	1ad3      	subs	r3, r2, r3
 8001a7e:	2b02      	cmp	r3, #2
 8001a80:	d901      	bls.n	8001a86 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001a82:	2303      	movs	r3, #3
 8001a84:	e020      	b.n	8001ac8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a86:	4b12      	ldr	r3, [pc, #72]	; (8001ad0 <HAL_RCC_OscConfig+0x4f4>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d1f0      	bne.n	8001a74 <HAL_RCC_OscConfig+0x498>
 8001a92:	e018      	b.n	8001ac6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	69db      	ldr	r3, [r3, #28]
 8001a98:	2b01      	cmp	r3, #1
 8001a9a:	d101      	bne.n	8001aa0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	e013      	b.n	8001ac8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001aa0:	4b0b      	ldr	r3, [pc, #44]	; (8001ad0 <HAL_RCC_OscConfig+0x4f4>)
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6a1b      	ldr	r3, [r3, #32]
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	d106      	bne.n	8001ac2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001abe:	429a      	cmp	r2, r3
 8001ac0:	d001      	beq.n	8001ac6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	e000      	b.n	8001ac8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001ac6:	2300      	movs	r3, #0
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	3718      	adds	r7, #24
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bd80      	pop	{r7, pc}
 8001ad0:	40021000 	.word	0x40021000
 8001ad4:	40007000 	.word	0x40007000
 8001ad8:	42420060 	.word	0x42420060

08001adc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b084      	sub	sp, #16
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
 8001ae4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d101      	bne.n	8001af0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001aec:	2301      	movs	r3, #1
 8001aee:	e0d0      	b.n	8001c92 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001af0:	4b6a      	ldr	r3, [pc, #424]	; (8001c9c <HAL_RCC_ClockConfig+0x1c0>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f003 0307 	and.w	r3, r3, #7
 8001af8:	683a      	ldr	r2, [r7, #0]
 8001afa:	429a      	cmp	r2, r3
 8001afc:	d910      	bls.n	8001b20 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001afe:	4b67      	ldr	r3, [pc, #412]	; (8001c9c <HAL_RCC_ClockConfig+0x1c0>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f023 0207 	bic.w	r2, r3, #7
 8001b06:	4965      	ldr	r1, [pc, #404]	; (8001c9c <HAL_RCC_ClockConfig+0x1c0>)
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	4313      	orrs	r3, r2
 8001b0c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b0e:	4b63      	ldr	r3, [pc, #396]	; (8001c9c <HAL_RCC_ClockConfig+0x1c0>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f003 0307 	and.w	r3, r3, #7
 8001b16:	683a      	ldr	r2, [r7, #0]
 8001b18:	429a      	cmp	r2, r3
 8001b1a:	d001      	beq.n	8001b20 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	e0b8      	b.n	8001c92 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f003 0302 	and.w	r3, r3, #2
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d020      	beq.n	8001b6e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f003 0304 	and.w	r3, r3, #4
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d005      	beq.n	8001b44 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b38:	4b59      	ldr	r3, [pc, #356]	; (8001ca0 <HAL_RCC_ClockConfig+0x1c4>)
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	4a58      	ldr	r2, [pc, #352]	; (8001ca0 <HAL_RCC_ClockConfig+0x1c4>)
 8001b3e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001b42:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f003 0308 	and.w	r3, r3, #8
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d005      	beq.n	8001b5c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b50:	4b53      	ldr	r3, [pc, #332]	; (8001ca0 <HAL_RCC_ClockConfig+0x1c4>)
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	4a52      	ldr	r2, [pc, #328]	; (8001ca0 <HAL_RCC_ClockConfig+0x1c4>)
 8001b56:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001b5a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b5c:	4b50      	ldr	r3, [pc, #320]	; (8001ca0 <HAL_RCC_ClockConfig+0x1c4>)
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	689b      	ldr	r3, [r3, #8]
 8001b68:	494d      	ldr	r1, [pc, #308]	; (8001ca0 <HAL_RCC_ClockConfig+0x1c4>)
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f003 0301 	and.w	r3, r3, #1
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d040      	beq.n	8001bfc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	2b01      	cmp	r3, #1
 8001b80:	d107      	bne.n	8001b92 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b82:	4b47      	ldr	r3, [pc, #284]	; (8001ca0 <HAL_RCC_ClockConfig+0x1c4>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d115      	bne.n	8001bba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	e07f      	b.n	8001c92 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	2b02      	cmp	r3, #2
 8001b98:	d107      	bne.n	8001baa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b9a:	4b41      	ldr	r3, [pc, #260]	; (8001ca0 <HAL_RCC_ClockConfig+0x1c4>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d109      	bne.n	8001bba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	e073      	b.n	8001c92 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001baa:	4b3d      	ldr	r3, [pc, #244]	; (8001ca0 <HAL_RCC_ClockConfig+0x1c4>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f003 0302 	and.w	r3, r3, #2
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d101      	bne.n	8001bba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	e06b      	b.n	8001c92 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001bba:	4b39      	ldr	r3, [pc, #228]	; (8001ca0 <HAL_RCC_ClockConfig+0x1c4>)
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	f023 0203 	bic.w	r2, r3, #3
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	4936      	ldr	r1, [pc, #216]	; (8001ca0 <HAL_RCC_ClockConfig+0x1c4>)
 8001bc8:	4313      	orrs	r3, r2
 8001bca:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001bcc:	f7ff fa3a 	bl	8001044 <HAL_GetTick>
 8001bd0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bd2:	e00a      	b.n	8001bea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bd4:	f7ff fa36 	bl	8001044 <HAL_GetTick>
 8001bd8:	4602      	mov	r2, r0
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	1ad3      	subs	r3, r2, r3
 8001bde:	f241 3288 	movw	r2, #5000	; 0x1388
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d901      	bls.n	8001bea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001be6:	2303      	movs	r3, #3
 8001be8:	e053      	b.n	8001c92 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bea:	4b2d      	ldr	r3, [pc, #180]	; (8001ca0 <HAL_RCC_ClockConfig+0x1c4>)
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	f003 020c 	and.w	r2, r3, #12
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	009b      	lsls	r3, r3, #2
 8001bf8:	429a      	cmp	r2, r3
 8001bfa:	d1eb      	bne.n	8001bd4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001bfc:	4b27      	ldr	r3, [pc, #156]	; (8001c9c <HAL_RCC_ClockConfig+0x1c0>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f003 0307 	and.w	r3, r3, #7
 8001c04:	683a      	ldr	r2, [r7, #0]
 8001c06:	429a      	cmp	r2, r3
 8001c08:	d210      	bcs.n	8001c2c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c0a:	4b24      	ldr	r3, [pc, #144]	; (8001c9c <HAL_RCC_ClockConfig+0x1c0>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f023 0207 	bic.w	r2, r3, #7
 8001c12:	4922      	ldr	r1, [pc, #136]	; (8001c9c <HAL_RCC_ClockConfig+0x1c0>)
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	4313      	orrs	r3, r2
 8001c18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c1a:	4b20      	ldr	r3, [pc, #128]	; (8001c9c <HAL_RCC_ClockConfig+0x1c0>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f003 0307 	and.w	r3, r3, #7
 8001c22:	683a      	ldr	r2, [r7, #0]
 8001c24:	429a      	cmp	r2, r3
 8001c26:	d001      	beq.n	8001c2c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	e032      	b.n	8001c92 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f003 0304 	and.w	r3, r3, #4
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d008      	beq.n	8001c4a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c38:	4b19      	ldr	r3, [pc, #100]	; (8001ca0 <HAL_RCC_ClockConfig+0x1c4>)
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	68db      	ldr	r3, [r3, #12]
 8001c44:	4916      	ldr	r1, [pc, #88]	; (8001ca0 <HAL_RCC_ClockConfig+0x1c4>)
 8001c46:	4313      	orrs	r3, r2
 8001c48:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f003 0308 	and.w	r3, r3, #8
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d009      	beq.n	8001c6a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001c56:	4b12      	ldr	r3, [pc, #72]	; (8001ca0 <HAL_RCC_ClockConfig+0x1c4>)
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	691b      	ldr	r3, [r3, #16]
 8001c62:	00db      	lsls	r3, r3, #3
 8001c64:	490e      	ldr	r1, [pc, #56]	; (8001ca0 <HAL_RCC_ClockConfig+0x1c4>)
 8001c66:	4313      	orrs	r3, r2
 8001c68:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001c6a:	f000 f821 	bl	8001cb0 <HAL_RCC_GetSysClockFreq>
 8001c6e:	4602      	mov	r2, r0
 8001c70:	4b0b      	ldr	r3, [pc, #44]	; (8001ca0 <HAL_RCC_ClockConfig+0x1c4>)
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	091b      	lsrs	r3, r3, #4
 8001c76:	f003 030f 	and.w	r3, r3, #15
 8001c7a:	490a      	ldr	r1, [pc, #40]	; (8001ca4 <HAL_RCC_ClockConfig+0x1c8>)
 8001c7c:	5ccb      	ldrb	r3, [r1, r3]
 8001c7e:	fa22 f303 	lsr.w	r3, r2, r3
 8001c82:	4a09      	ldr	r2, [pc, #36]	; (8001ca8 <HAL_RCC_ClockConfig+0x1cc>)
 8001c84:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001c86:	4b09      	ldr	r3, [pc, #36]	; (8001cac <HAL_RCC_ClockConfig+0x1d0>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f7ff f998 	bl	8000fc0 <HAL_InitTick>

  return HAL_OK;
 8001c90:	2300      	movs	r3, #0
}
 8001c92:	4618      	mov	r0, r3
 8001c94:	3710      	adds	r7, #16
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	40022000 	.word	0x40022000
 8001ca0:	40021000 	.word	0x40021000
 8001ca4:	08002cd0 	.word	0x08002cd0
 8001ca8:	2000003c 	.word	0x2000003c
 8001cac:	20000040 	.word	0x20000040

08001cb0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001cb0:	b490      	push	{r4, r7}
 8001cb2:	b08a      	sub	sp, #40	; 0x28
 8001cb4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001cb6:	4b2a      	ldr	r3, [pc, #168]	; (8001d60 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001cb8:	1d3c      	adds	r4, r7, #4
 8001cba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001cbc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001cc0:	f240 2301 	movw	r3, #513	; 0x201
 8001cc4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	61fb      	str	r3, [r7, #28]
 8001cca:	2300      	movs	r3, #0
 8001ccc:	61bb      	str	r3, [r7, #24]
 8001cce:	2300      	movs	r3, #0
 8001cd0:	627b      	str	r3, [r7, #36]	; 0x24
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001cda:	4b22      	ldr	r3, [pc, #136]	; (8001d64 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001ce0:	69fb      	ldr	r3, [r7, #28]
 8001ce2:	f003 030c 	and.w	r3, r3, #12
 8001ce6:	2b04      	cmp	r3, #4
 8001ce8:	d002      	beq.n	8001cf0 <HAL_RCC_GetSysClockFreq+0x40>
 8001cea:	2b08      	cmp	r3, #8
 8001cec:	d003      	beq.n	8001cf6 <HAL_RCC_GetSysClockFreq+0x46>
 8001cee:	e02d      	b.n	8001d4c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001cf0:	4b1d      	ldr	r3, [pc, #116]	; (8001d68 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001cf2:	623b      	str	r3, [r7, #32]
      break;
 8001cf4:	e02d      	b.n	8001d52 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001cf6:	69fb      	ldr	r3, [r7, #28]
 8001cf8:	0c9b      	lsrs	r3, r3, #18
 8001cfa:	f003 030f 	and.w	r3, r3, #15
 8001cfe:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001d02:	4413      	add	r3, r2
 8001d04:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001d08:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001d0a:	69fb      	ldr	r3, [r7, #28]
 8001d0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d013      	beq.n	8001d3c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001d14:	4b13      	ldr	r3, [pc, #76]	; (8001d64 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	0c5b      	lsrs	r3, r3, #17
 8001d1a:	f003 0301 	and.w	r3, r3, #1
 8001d1e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001d22:	4413      	add	r3, r2
 8001d24:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001d28:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001d2a:	697b      	ldr	r3, [r7, #20]
 8001d2c:	4a0e      	ldr	r2, [pc, #56]	; (8001d68 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d2e:	fb02 f203 	mul.w	r2, r2, r3
 8001d32:	69bb      	ldr	r3, [r7, #24]
 8001d34:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d38:	627b      	str	r3, [r7, #36]	; 0x24
 8001d3a:	e004      	b.n	8001d46 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	4a0b      	ldr	r2, [pc, #44]	; (8001d6c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001d40:	fb02 f303 	mul.w	r3, r2, r3
 8001d44:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d48:	623b      	str	r3, [r7, #32]
      break;
 8001d4a:	e002      	b.n	8001d52 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001d4c:	4b06      	ldr	r3, [pc, #24]	; (8001d68 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d4e:	623b      	str	r3, [r7, #32]
      break;
 8001d50:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d52:	6a3b      	ldr	r3, [r7, #32]
}
 8001d54:	4618      	mov	r0, r3
 8001d56:	3728      	adds	r7, #40	; 0x28
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bc90      	pop	{r4, r7}
 8001d5c:	4770      	bx	lr
 8001d5e:	bf00      	nop
 8001d60:	08002cc0 	.word	0x08002cc0
 8001d64:	40021000 	.word	0x40021000
 8001d68:	007a1200 	.word	0x007a1200
 8001d6c:	003d0900 	.word	0x003d0900

08001d70 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b085      	sub	sp, #20
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001d78:	4b0a      	ldr	r3, [pc, #40]	; (8001da4 <RCC_Delay+0x34>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a0a      	ldr	r2, [pc, #40]	; (8001da8 <RCC_Delay+0x38>)
 8001d7e:	fba2 2303 	umull	r2, r3, r2, r3
 8001d82:	0a5b      	lsrs	r3, r3, #9
 8001d84:	687a      	ldr	r2, [r7, #4]
 8001d86:	fb02 f303 	mul.w	r3, r2, r3
 8001d8a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001d8c:	bf00      	nop
  }
  while (Delay --);
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	1e5a      	subs	r2, r3, #1
 8001d92:	60fa      	str	r2, [r7, #12]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d1f9      	bne.n	8001d8c <RCC_Delay+0x1c>
}
 8001d98:	bf00      	nop
 8001d9a:	bf00      	nop
 8001d9c:	3714      	adds	r7, #20
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bc80      	pop	{r7}
 8001da2:	4770      	bx	lr
 8001da4:	2000003c 	.word	0x2000003c
 8001da8:	10624dd3 	.word	0x10624dd3

08001dac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b082      	sub	sp, #8
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d101      	bne.n	8001dbe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	e041      	b.n	8001e42 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001dc4:	b2db      	uxtb	r3, r3
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d106      	bne.n	8001dd8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2200      	movs	r2, #0
 8001dce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001dd2:	6878      	ldr	r0, [r7, #4]
 8001dd4:	f7fe fef6 	bl	8000bc4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2202      	movs	r2, #2
 8001ddc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681a      	ldr	r2, [r3, #0]
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	3304      	adds	r3, #4
 8001de8:	4619      	mov	r1, r3
 8001dea:	4610      	mov	r0, r2
 8001dec:	f000 fb7e 	bl	80024ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2201      	movs	r2, #1
 8001df4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2201      	movs	r2, #1
 8001dfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2201      	movs	r2, #1
 8001e04:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2201      	movs	r2, #1
 8001e14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2201      	movs	r2, #1
 8001e24:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2201      	movs	r2, #1
 8001e2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2201      	movs	r2, #1
 8001e34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2201      	movs	r2, #1
 8001e3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001e40:	2300      	movs	r3, #0
}
 8001e42:	4618      	mov	r0, r3
 8001e44:	3708      	adds	r7, #8
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}
	...

08001e4c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b085      	sub	sp, #20
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e5a:	b2db      	uxtb	r3, r3
 8001e5c:	2b01      	cmp	r3, #1
 8001e5e:	d001      	beq.n	8001e64 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001e60:	2301      	movs	r3, #1
 8001e62:	e03a      	b.n	8001eda <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2202      	movs	r2, #2
 8001e68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	68da      	ldr	r2, [r3, #12]
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f042 0201 	orr.w	r2, r2, #1
 8001e7a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a18      	ldr	r2, [pc, #96]	; (8001ee4 <HAL_TIM_Base_Start_IT+0x98>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d00e      	beq.n	8001ea4 <HAL_TIM_Base_Start_IT+0x58>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e8e:	d009      	beq.n	8001ea4 <HAL_TIM_Base_Start_IT+0x58>
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a14      	ldr	r2, [pc, #80]	; (8001ee8 <HAL_TIM_Base_Start_IT+0x9c>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d004      	beq.n	8001ea4 <HAL_TIM_Base_Start_IT+0x58>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4a13      	ldr	r2, [pc, #76]	; (8001eec <HAL_TIM_Base_Start_IT+0xa0>)
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d111      	bne.n	8001ec8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	689b      	ldr	r3, [r3, #8]
 8001eaa:	f003 0307 	and.w	r3, r3, #7
 8001eae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	2b06      	cmp	r3, #6
 8001eb4:	d010      	beq.n	8001ed8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	681a      	ldr	r2, [r3, #0]
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f042 0201 	orr.w	r2, r2, #1
 8001ec4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ec6:	e007      	b.n	8001ed8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	681a      	ldr	r2, [r3, #0]
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f042 0201 	orr.w	r2, r2, #1
 8001ed6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001ed8:	2300      	movs	r3, #0
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	3714      	adds	r7, #20
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bc80      	pop	{r7}
 8001ee2:	4770      	bx	lr
 8001ee4:	40012c00 	.word	0x40012c00
 8001ee8:	40000400 	.word	0x40000400
 8001eec:	40000800 	.word	0x40000800

08001ef0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b082      	sub	sp, #8
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d101      	bne.n	8001f02 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001efe:	2301      	movs	r3, #1
 8001f00:	e041      	b.n	8001f86 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f08:	b2db      	uxtb	r3, r3
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d106      	bne.n	8001f1c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2200      	movs	r2, #0
 8001f12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001f16:	6878      	ldr	r0, [r7, #4]
 8001f18:	f7fe fe78 	bl	8000c0c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2202      	movs	r2, #2
 8001f20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681a      	ldr	r2, [r3, #0]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	3304      	adds	r3, #4
 8001f2c:	4619      	mov	r1, r3
 8001f2e:	4610      	mov	r0, r2
 8001f30:	f000 fadc 	bl	80024ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2201      	movs	r2, #1
 8001f38:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2201      	movs	r2, #1
 8001f40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2201      	movs	r2, #1
 8001f48:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2201      	movs	r2, #1
 8001f50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2201      	movs	r2, #1
 8001f58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2201      	movs	r2, #1
 8001f60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2201      	movs	r2, #1
 8001f68:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2201      	movs	r2, #1
 8001f70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2201      	movs	r2, #1
 8001f78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2201      	movs	r2, #1
 8001f80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001f84:	2300      	movs	r3, #0
}
 8001f86:	4618      	mov	r0, r3
 8001f88:	3708      	adds	r7, #8
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}

08001f8e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001f8e:	b580      	push	{r7, lr}
 8001f90:	b082      	sub	sp, #8
 8001f92:	af00      	add	r7, sp, #0
 8001f94:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	691b      	ldr	r3, [r3, #16]
 8001f9c:	f003 0302 	and.w	r3, r3, #2
 8001fa0:	2b02      	cmp	r3, #2
 8001fa2:	d122      	bne.n	8001fea <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	68db      	ldr	r3, [r3, #12]
 8001faa:	f003 0302 	and.w	r3, r3, #2
 8001fae:	2b02      	cmp	r3, #2
 8001fb0:	d11b      	bne.n	8001fea <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f06f 0202 	mvn.w	r2, #2
 8001fba:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2201      	movs	r2, #1
 8001fc0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	699b      	ldr	r3, [r3, #24]
 8001fc8:	f003 0303 	and.w	r3, r3, #3
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d003      	beq.n	8001fd8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001fd0:	6878      	ldr	r0, [r7, #4]
 8001fd2:	f000 fa70 	bl	80024b6 <HAL_TIM_IC_CaptureCallback>
 8001fd6:	e005      	b.n	8001fe4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fd8:	6878      	ldr	r0, [r7, #4]
 8001fda:	f000 fa63 	bl	80024a4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fde:	6878      	ldr	r0, [r7, #4]
 8001fe0:	f000 fa72 	bl	80024c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	691b      	ldr	r3, [r3, #16]
 8001ff0:	f003 0304 	and.w	r3, r3, #4
 8001ff4:	2b04      	cmp	r3, #4
 8001ff6:	d122      	bne.n	800203e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	68db      	ldr	r3, [r3, #12]
 8001ffe:	f003 0304 	and.w	r3, r3, #4
 8002002:	2b04      	cmp	r3, #4
 8002004:	d11b      	bne.n	800203e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f06f 0204 	mvn.w	r2, #4
 800200e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2202      	movs	r2, #2
 8002014:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	699b      	ldr	r3, [r3, #24]
 800201c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002020:	2b00      	cmp	r3, #0
 8002022:	d003      	beq.n	800202c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002024:	6878      	ldr	r0, [r7, #4]
 8002026:	f000 fa46 	bl	80024b6 <HAL_TIM_IC_CaptureCallback>
 800202a:	e005      	b.n	8002038 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800202c:	6878      	ldr	r0, [r7, #4]
 800202e:	f000 fa39 	bl	80024a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002032:	6878      	ldr	r0, [r7, #4]
 8002034:	f000 fa48 	bl	80024c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2200      	movs	r2, #0
 800203c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	691b      	ldr	r3, [r3, #16]
 8002044:	f003 0308 	and.w	r3, r3, #8
 8002048:	2b08      	cmp	r3, #8
 800204a:	d122      	bne.n	8002092 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	68db      	ldr	r3, [r3, #12]
 8002052:	f003 0308 	and.w	r3, r3, #8
 8002056:	2b08      	cmp	r3, #8
 8002058:	d11b      	bne.n	8002092 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f06f 0208 	mvn.w	r2, #8
 8002062:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2204      	movs	r2, #4
 8002068:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	69db      	ldr	r3, [r3, #28]
 8002070:	f003 0303 	and.w	r3, r3, #3
 8002074:	2b00      	cmp	r3, #0
 8002076:	d003      	beq.n	8002080 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002078:	6878      	ldr	r0, [r7, #4]
 800207a:	f000 fa1c 	bl	80024b6 <HAL_TIM_IC_CaptureCallback>
 800207e:	e005      	b.n	800208c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002080:	6878      	ldr	r0, [r7, #4]
 8002082:	f000 fa0f 	bl	80024a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002086:	6878      	ldr	r0, [r7, #4]
 8002088:	f000 fa1e 	bl	80024c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2200      	movs	r2, #0
 8002090:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	691b      	ldr	r3, [r3, #16]
 8002098:	f003 0310 	and.w	r3, r3, #16
 800209c:	2b10      	cmp	r3, #16
 800209e:	d122      	bne.n	80020e6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	68db      	ldr	r3, [r3, #12]
 80020a6:	f003 0310 	and.w	r3, r3, #16
 80020aa:	2b10      	cmp	r3, #16
 80020ac:	d11b      	bne.n	80020e6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f06f 0210 	mvn.w	r2, #16
 80020b6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2208      	movs	r2, #8
 80020bc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	69db      	ldr	r3, [r3, #28]
 80020c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d003      	beq.n	80020d4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020cc:	6878      	ldr	r0, [r7, #4]
 80020ce:	f000 f9f2 	bl	80024b6 <HAL_TIM_IC_CaptureCallback>
 80020d2:	e005      	b.n	80020e0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020d4:	6878      	ldr	r0, [r7, #4]
 80020d6:	f000 f9e5 	bl	80024a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020da:	6878      	ldr	r0, [r7, #4]
 80020dc:	f000 f9f4 	bl	80024c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2200      	movs	r2, #0
 80020e4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	691b      	ldr	r3, [r3, #16]
 80020ec:	f003 0301 	and.w	r3, r3, #1
 80020f0:	2b01      	cmp	r3, #1
 80020f2:	d10e      	bne.n	8002112 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	68db      	ldr	r3, [r3, #12]
 80020fa:	f003 0301 	and.w	r3, r3, #1
 80020fe:	2b01      	cmp	r3, #1
 8002100:	d107      	bne.n	8002112 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f06f 0201 	mvn.w	r2, #1
 800210a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800210c:	6878      	ldr	r0, [r7, #4]
 800210e:	f7fe fb5f 	bl	80007d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	691b      	ldr	r3, [r3, #16]
 8002118:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800211c:	2b80      	cmp	r3, #128	; 0x80
 800211e:	d10e      	bne.n	800213e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	68db      	ldr	r3, [r3, #12]
 8002126:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800212a:	2b80      	cmp	r3, #128	; 0x80
 800212c:	d107      	bne.n	800213e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002136:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002138:	6878      	ldr	r0, [r7, #4]
 800213a:	f000 fd5c 	bl	8002bf6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	691b      	ldr	r3, [r3, #16]
 8002144:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002148:	2b40      	cmp	r3, #64	; 0x40
 800214a:	d10e      	bne.n	800216a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	68db      	ldr	r3, [r3, #12]
 8002152:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002156:	2b40      	cmp	r3, #64	; 0x40
 8002158:	d107      	bne.n	800216a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002162:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002164:	6878      	ldr	r0, [r7, #4]
 8002166:	f000 f9b8 	bl	80024da <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	691b      	ldr	r3, [r3, #16]
 8002170:	f003 0320 	and.w	r3, r3, #32
 8002174:	2b20      	cmp	r3, #32
 8002176:	d10e      	bne.n	8002196 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	68db      	ldr	r3, [r3, #12]
 800217e:	f003 0320 	and.w	r3, r3, #32
 8002182:	2b20      	cmp	r3, #32
 8002184:	d107      	bne.n	8002196 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f06f 0220 	mvn.w	r2, #32
 800218e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002190:	6878      	ldr	r0, [r7, #4]
 8002192:	f000 fd27 	bl	8002be4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002196:	bf00      	nop
 8002198:	3708      	adds	r7, #8
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}
	...

080021a0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b084      	sub	sp, #16
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	60f8      	str	r0, [r7, #12]
 80021a8:	60b9      	str	r1, [r7, #8]
 80021aa:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021b2:	2b01      	cmp	r3, #1
 80021b4:	d101      	bne.n	80021ba <HAL_TIM_PWM_ConfigChannel+0x1a>
 80021b6:	2302      	movs	r3, #2
 80021b8:	e0ac      	b.n	8002314 <HAL_TIM_PWM_ConfigChannel+0x174>
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	2201      	movs	r2, #1
 80021be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2b0c      	cmp	r3, #12
 80021c6:	f200 809f 	bhi.w	8002308 <HAL_TIM_PWM_ConfigChannel+0x168>
 80021ca:	a201      	add	r2, pc, #4	; (adr r2, 80021d0 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80021cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021d0:	08002205 	.word	0x08002205
 80021d4:	08002309 	.word	0x08002309
 80021d8:	08002309 	.word	0x08002309
 80021dc:	08002309 	.word	0x08002309
 80021e0:	08002245 	.word	0x08002245
 80021e4:	08002309 	.word	0x08002309
 80021e8:	08002309 	.word	0x08002309
 80021ec:	08002309 	.word	0x08002309
 80021f0:	08002287 	.word	0x08002287
 80021f4:	08002309 	.word	0x08002309
 80021f8:	08002309 	.word	0x08002309
 80021fc:	08002309 	.word	0x08002309
 8002200:	080022c7 	.word	0x080022c7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	68b9      	ldr	r1, [r7, #8]
 800220a:	4618      	mov	r0, r3
 800220c:	f000 f9d0 	bl	80025b0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	699a      	ldr	r2, [r3, #24]
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f042 0208 	orr.w	r2, r2, #8
 800221e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	699a      	ldr	r2, [r3, #24]
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f022 0204 	bic.w	r2, r2, #4
 800222e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	6999      	ldr	r1, [r3, #24]
 8002236:	68bb      	ldr	r3, [r7, #8]
 8002238:	691a      	ldr	r2, [r3, #16]
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	430a      	orrs	r2, r1
 8002240:	619a      	str	r2, [r3, #24]
      break;
 8002242:	e062      	b.n	800230a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	68b9      	ldr	r1, [r7, #8]
 800224a:	4618      	mov	r0, r3
 800224c:	f000 fa16 	bl	800267c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	699a      	ldr	r2, [r3, #24]
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800225e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	699a      	ldr	r2, [r3, #24]
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800226e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	6999      	ldr	r1, [r3, #24]
 8002276:	68bb      	ldr	r3, [r7, #8]
 8002278:	691b      	ldr	r3, [r3, #16]
 800227a:	021a      	lsls	r2, r3, #8
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	430a      	orrs	r2, r1
 8002282:	619a      	str	r2, [r3, #24]
      break;
 8002284:	e041      	b.n	800230a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	68b9      	ldr	r1, [r7, #8]
 800228c:	4618      	mov	r0, r3
 800228e:	f000 fa5f 	bl	8002750 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	69da      	ldr	r2, [r3, #28]
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f042 0208 	orr.w	r2, r2, #8
 80022a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	69da      	ldr	r2, [r3, #28]
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f022 0204 	bic.w	r2, r2, #4
 80022b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	69d9      	ldr	r1, [r3, #28]
 80022b8:	68bb      	ldr	r3, [r7, #8]
 80022ba:	691a      	ldr	r2, [r3, #16]
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	430a      	orrs	r2, r1
 80022c2:	61da      	str	r2, [r3, #28]
      break;
 80022c4:	e021      	b.n	800230a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	68b9      	ldr	r1, [r7, #8]
 80022cc:	4618      	mov	r0, r3
 80022ce:	f000 faa9 	bl	8002824 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	69da      	ldr	r2, [r3, #28]
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80022e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	69da      	ldr	r2, [r3, #28]
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80022f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	69d9      	ldr	r1, [r3, #28]
 80022f8:	68bb      	ldr	r3, [r7, #8]
 80022fa:	691b      	ldr	r3, [r3, #16]
 80022fc:	021a      	lsls	r2, r3, #8
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	430a      	orrs	r2, r1
 8002304:	61da      	str	r2, [r3, #28]
      break;
 8002306:	e000      	b.n	800230a <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8002308:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	2200      	movs	r2, #0
 800230e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002312:	2300      	movs	r3, #0
}
 8002314:	4618      	mov	r0, r3
 8002316:	3710      	adds	r7, #16
 8002318:	46bd      	mov	sp, r7
 800231a:	bd80      	pop	{r7, pc}

0800231c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b084      	sub	sp, #16
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
 8002324:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800232c:	2b01      	cmp	r3, #1
 800232e:	d101      	bne.n	8002334 <HAL_TIM_ConfigClockSource+0x18>
 8002330:	2302      	movs	r3, #2
 8002332:	e0b3      	b.n	800249c <HAL_TIM_ConfigClockSource+0x180>
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2201      	movs	r2, #1
 8002338:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2202      	movs	r2, #2
 8002340:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	689b      	ldr	r3, [r3, #8]
 800234a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002352:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800235a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	68fa      	ldr	r2, [r7, #12]
 8002362:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800236c:	d03e      	beq.n	80023ec <HAL_TIM_ConfigClockSource+0xd0>
 800236e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002372:	f200 8087 	bhi.w	8002484 <HAL_TIM_ConfigClockSource+0x168>
 8002376:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800237a:	f000 8085 	beq.w	8002488 <HAL_TIM_ConfigClockSource+0x16c>
 800237e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002382:	d87f      	bhi.n	8002484 <HAL_TIM_ConfigClockSource+0x168>
 8002384:	2b70      	cmp	r3, #112	; 0x70
 8002386:	d01a      	beq.n	80023be <HAL_TIM_ConfigClockSource+0xa2>
 8002388:	2b70      	cmp	r3, #112	; 0x70
 800238a:	d87b      	bhi.n	8002484 <HAL_TIM_ConfigClockSource+0x168>
 800238c:	2b60      	cmp	r3, #96	; 0x60
 800238e:	d050      	beq.n	8002432 <HAL_TIM_ConfigClockSource+0x116>
 8002390:	2b60      	cmp	r3, #96	; 0x60
 8002392:	d877      	bhi.n	8002484 <HAL_TIM_ConfigClockSource+0x168>
 8002394:	2b50      	cmp	r3, #80	; 0x50
 8002396:	d03c      	beq.n	8002412 <HAL_TIM_ConfigClockSource+0xf6>
 8002398:	2b50      	cmp	r3, #80	; 0x50
 800239a:	d873      	bhi.n	8002484 <HAL_TIM_ConfigClockSource+0x168>
 800239c:	2b40      	cmp	r3, #64	; 0x40
 800239e:	d058      	beq.n	8002452 <HAL_TIM_ConfigClockSource+0x136>
 80023a0:	2b40      	cmp	r3, #64	; 0x40
 80023a2:	d86f      	bhi.n	8002484 <HAL_TIM_ConfigClockSource+0x168>
 80023a4:	2b30      	cmp	r3, #48	; 0x30
 80023a6:	d064      	beq.n	8002472 <HAL_TIM_ConfigClockSource+0x156>
 80023a8:	2b30      	cmp	r3, #48	; 0x30
 80023aa:	d86b      	bhi.n	8002484 <HAL_TIM_ConfigClockSource+0x168>
 80023ac:	2b20      	cmp	r3, #32
 80023ae:	d060      	beq.n	8002472 <HAL_TIM_ConfigClockSource+0x156>
 80023b0:	2b20      	cmp	r3, #32
 80023b2:	d867      	bhi.n	8002484 <HAL_TIM_ConfigClockSource+0x168>
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d05c      	beq.n	8002472 <HAL_TIM_ConfigClockSource+0x156>
 80023b8:	2b10      	cmp	r3, #16
 80023ba:	d05a      	beq.n	8002472 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80023bc:	e062      	b.n	8002484 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6818      	ldr	r0, [r3, #0]
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	6899      	ldr	r1, [r3, #8]
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	685a      	ldr	r2, [r3, #4]
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	68db      	ldr	r3, [r3, #12]
 80023ce:	f000 faee 	bl	80029ae <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	689b      	ldr	r3, [r3, #8]
 80023d8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80023e0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	68fa      	ldr	r2, [r7, #12]
 80023e8:	609a      	str	r2, [r3, #8]
      break;
 80023ea:	e04e      	b.n	800248a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6818      	ldr	r0, [r3, #0]
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	6899      	ldr	r1, [r3, #8]
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	685a      	ldr	r2, [r3, #4]
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	68db      	ldr	r3, [r3, #12]
 80023fc:	f000 fad7 	bl	80029ae <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	689a      	ldr	r2, [r3, #8]
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800240e:	609a      	str	r2, [r3, #8]
      break;
 8002410:	e03b      	b.n	800248a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6818      	ldr	r0, [r3, #0]
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	6859      	ldr	r1, [r3, #4]
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	68db      	ldr	r3, [r3, #12]
 800241e:	461a      	mov	r2, r3
 8002420:	f000 fa4e 	bl	80028c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	2150      	movs	r1, #80	; 0x50
 800242a:	4618      	mov	r0, r3
 800242c:	f000 faa5 	bl	800297a <TIM_ITRx_SetConfig>
      break;
 8002430:	e02b      	b.n	800248a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6818      	ldr	r0, [r3, #0]
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	6859      	ldr	r1, [r3, #4]
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	68db      	ldr	r3, [r3, #12]
 800243e:	461a      	mov	r2, r3
 8002440:	f000 fa6c 	bl	800291c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	2160      	movs	r1, #96	; 0x60
 800244a:	4618      	mov	r0, r3
 800244c:	f000 fa95 	bl	800297a <TIM_ITRx_SetConfig>
      break;
 8002450:	e01b      	b.n	800248a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6818      	ldr	r0, [r3, #0]
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	6859      	ldr	r1, [r3, #4]
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	68db      	ldr	r3, [r3, #12]
 800245e:	461a      	mov	r2, r3
 8002460:	f000 fa2e 	bl	80028c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	2140      	movs	r1, #64	; 0x40
 800246a:	4618      	mov	r0, r3
 800246c:	f000 fa85 	bl	800297a <TIM_ITRx_SetConfig>
      break;
 8002470:	e00b      	b.n	800248a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681a      	ldr	r2, [r3, #0]
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4619      	mov	r1, r3
 800247c:	4610      	mov	r0, r2
 800247e:	f000 fa7c 	bl	800297a <TIM_ITRx_SetConfig>
        break;
 8002482:	e002      	b.n	800248a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002484:	bf00      	nop
 8002486:	e000      	b.n	800248a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002488:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2201      	movs	r2, #1
 800248e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2200      	movs	r2, #0
 8002496:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800249a:	2300      	movs	r3, #0
}
 800249c:	4618      	mov	r0, r3
 800249e:	3710      	adds	r7, #16
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bd80      	pop	{r7, pc}

080024a4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b083      	sub	sp, #12
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80024ac:	bf00      	nop
 80024ae:	370c      	adds	r7, #12
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bc80      	pop	{r7}
 80024b4:	4770      	bx	lr

080024b6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80024b6:	b480      	push	{r7}
 80024b8:	b083      	sub	sp, #12
 80024ba:	af00      	add	r7, sp, #0
 80024bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80024be:	bf00      	nop
 80024c0:	370c      	adds	r7, #12
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bc80      	pop	{r7}
 80024c6:	4770      	bx	lr

080024c8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b083      	sub	sp, #12
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80024d0:	bf00      	nop
 80024d2:	370c      	adds	r7, #12
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bc80      	pop	{r7}
 80024d8:	4770      	bx	lr

080024da <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80024da:	b480      	push	{r7}
 80024dc:	b083      	sub	sp, #12
 80024de:	af00      	add	r7, sp, #0
 80024e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80024e2:	bf00      	nop
 80024e4:	370c      	adds	r7, #12
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bc80      	pop	{r7}
 80024ea:	4770      	bx	lr

080024ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80024ec:	b480      	push	{r7}
 80024ee:	b085      	sub	sp, #20
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
 80024f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	4a29      	ldr	r2, [pc, #164]	; (80025a4 <TIM_Base_SetConfig+0xb8>)
 8002500:	4293      	cmp	r3, r2
 8002502:	d00b      	beq.n	800251c <TIM_Base_SetConfig+0x30>
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800250a:	d007      	beq.n	800251c <TIM_Base_SetConfig+0x30>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	4a26      	ldr	r2, [pc, #152]	; (80025a8 <TIM_Base_SetConfig+0xbc>)
 8002510:	4293      	cmp	r3, r2
 8002512:	d003      	beq.n	800251c <TIM_Base_SetConfig+0x30>
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	4a25      	ldr	r2, [pc, #148]	; (80025ac <TIM_Base_SetConfig+0xc0>)
 8002518:	4293      	cmp	r3, r2
 800251a:	d108      	bne.n	800252e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002522:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	68fa      	ldr	r2, [r7, #12]
 800252a:	4313      	orrs	r3, r2
 800252c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	4a1c      	ldr	r2, [pc, #112]	; (80025a4 <TIM_Base_SetConfig+0xb8>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d00b      	beq.n	800254e <TIM_Base_SetConfig+0x62>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800253c:	d007      	beq.n	800254e <TIM_Base_SetConfig+0x62>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	4a19      	ldr	r2, [pc, #100]	; (80025a8 <TIM_Base_SetConfig+0xbc>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d003      	beq.n	800254e <TIM_Base_SetConfig+0x62>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	4a18      	ldr	r2, [pc, #96]	; (80025ac <TIM_Base_SetConfig+0xc0>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d108      	bne.n	8002560 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002554:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	68db      	ldr	r3, [r3, #12]
 800255a:	68fa      	ldr	r2, [r7, #12]
 800255c:	4313      	orrs	r3, r2
 800255e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	695b      	ldr	r3, [r3, #20]
 800256a:	4313      	orrs	r3, r2
 800256c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	68fa      	ldr	r2, [r7, #12]
 8002572:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	689a      	ldr	r2, [r3, #8]
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	681a      	ldr	r2, [r3, #0]
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	4a07      	ldr	r2, [pc, #28]	; (80025a4 <TIM_Base_SetConfig+0xb8>)
 8002588:	4293      	cmp	r3, r2
 800258a:	d103      	bne.n	8002594 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	691a      	ldr	r2, [r3, #16]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2201      	movs	r2, #1
 8002598:	615a      	str	r2, [r3, #20]
}
 800259a:	bf00      	nop
 800259c:	3714      	adds	r7, #20
 800259e:	46bd      	mov	sp, r7
 80025a0:	bc80      	pop	{r7}
 80025a2:	4770      	bx	lr
 80025a4:	40012c00 	.word	0x40012c00
 80025a8:	40000400 	.word	0x40000400
 80025ac:	40000800 	.word	0x40000800

080025b0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80025b0:	b480      	push	{r7}
 80025b2:	b087      	sub	sp, #28
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
 80025b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6a1b      	ldr	r3, [r3, #32]
 80025be:	f023 0201 	bic.w	r2, r3, #1
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6a1b      	ldr	r3, [r3, #32]
 80025ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	699b      	ldr	r3, [r3, #24]
 80025d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	f023 0303 	bic.w	r3, r3, #3
 80025e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	68fa      	ldr	r2, [r7, #12]
 80025ee:	4313      	orrs	r3, r2
 80025f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80025f2:	697b      	ldr	r3, [r7, #20]
 80025f4:	f023 0302 	bic.w	r3, r3, #2
 80025f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	689b      	ldr	r3, [r3, #8]
 80025fe:	697a      	ldr	r2, [r7, #20]
 8002600:	4313      	orrs	r3, r2
 8002602:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	4a1c      	ldr	r2, [pc, #112]	; (8002678 <TIM_OC1_SetConfig+0xc8>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d10c      	bne.n	8002626 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800260c:	697b      	ldr	r3, [r7, #20]
 800260e:	f023 0308 	bic.w	r3, r3, #8
 8002612:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	68db      	ldr	r3, [r3, #12]
 8002618:	697a      	ldr	r2, [r7, #20]
 800261a:	4313      	orrs	r3, r2
 800261c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800261e:	697b      	ldr	r3, [r7, #20]
 8002620:	f023 0304 	bic.w	r3, r3, #4
 8002624:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	4a13      	ldr	r2, [pc, #76]	; (8002678 <TIM_OC1_SetConfig+0xc8>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d111      	bne.n	8002652 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002634:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002636:	693b      	ldr	r3, [r7, #16]
 8002638:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800263c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	695b      	ldr	r3, [r3, #20]
 8002642:	693a      	ldr	r2, [r7, #16]
 8002644:	4313      	orrs	r3, r2
 8002646:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	699b      	ldr	r3, [r3, #24]
 800264c:	693a      	ldr	r2, [r7, #16]
 800264e:	4313      	orrs	r3, r2
 8002650:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	693a      	ldr	r2, [r7, #16]
 8002656:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	68fa      	ldr	r2, [r7, #12]
 800265c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	685a      	ldr	r2, [r3, #4]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	697a      	ldr	r2, [r7, #20]
 800266a:	621a      	str	r2, [r3, #32]
}
 800266c:	bf00      	nop
 800266e:	371c      	adds	r7, #28
 8002670:	46bd      	mov	sp, r7
 8002672:	bc80      	pop	{r7}
 8002674:	4770      	bx	lr
 8002676:	bf00      	nop
 8002678:	40012c00 	.word	0x40012c00

0800267c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800267c:	b480      	push	{r7}
 800267e:	b087      	sub	sp, #28
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
 8002684:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6a1b      	ldr	r3, [r3, #32]
 800268a:	f023 0210 	bic.w	r2, r3, #16
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6a1b      	ldr	r3, [r3, #32]
 8002696:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	699b      	ldr	r3, [r3, #24]
 80026a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80026aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	021b      	lsls	r3, r3, #8
 80026ba:	68fa      	ldr	r2, [r7, #12]
 80026bc:	4313      	orrs	r3, r2
 80026be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	f023 0320 	bic.w	r3, r3, #32
 80026c6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	689b      	ldr	r3, [r3, #8]
 80026cc:	011b      	lsls	r3, r3, #4
 80026ce:	697a      	ldr	r2, [r7, #20]
 80026d0:	4313      	orrs	r3, r2
 80026d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	4a1d      	ldr	r2, [pc, #116]	; (800274c <TIM_OC2_SetConfig+0xd0>)
 80026d8:	4293      	cmp	r3, r2
 80026da:	d10d      	bne.n	80026f8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80026dc:	697b      	ldr	r3, [r7, #20]
 80026de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80026e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	68db      	ldr	r3, [r3, #12]
 80026e8:	011b      	lsls	r3, r3, #4
 80026ea:	697a      	ldr	r2, [r7, #20]
 80026ec:	4313      	orrs	r3, r2
 80026ee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80026f0:	697b      	ldr	r3, [r7, #20]
 80026f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80026f6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	4a14      	ldr	r2, [pc, #80]	; (800274c <TIM_OC2_SetConfig+0xd0>)
 80026fc:	4293      	cmp	r3, r2
 80026fe:	d113      	bne.n	8002728 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002700:	693b      	ldr	r3, [r7, #16]
 8002702:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002706:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002708:	693b      	ldr	r3, [r7, #16]
 800270a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800270e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	695b      	ldr	r3, [r3, #20]
 8002714:	009b      	lsls	r3, r3, #2
 8002716:	693a      	ldr	r2, [r7, #16]
 8002718:	4313      	orrs	r3, r2
 800271a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	699b      	ldr	r3, [r3, #24]
 8002720:	009b      	lsls	r3, r3, #2
 8002722:	693a      	ldr	r2, [r7, #16]
 8002724:	4313      	orrs	r3, r2
 8002726:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	693a      	ldr	r2, [r7, #16]
 800272c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	68fa      	ldr	r2, [r7, #12]
 8002732:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	685a      	ldr	r2, [r3, #4]
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	697a      	ldr	r2, [r7, #20]
 8002740:	621a      	str	r2, [r3, #32]
}
 8002742:	bf00      	nop
 8002744:	371c      	adds	r7, #28
 8002746:	46bd      	mov	sp, r7
 8002748:	bc80      	pop	{r7}
 800274a:	4770      	bx	lr
 800274c:	40012c00 	.word	0x40012c00

08002750 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002750:	b480      	push	{r7}
 8002752:	b087      	sub	sp, #28
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
 8002758:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6a1b      	ldr	r3, [r3, #32]
 800275e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6a1b      	ldr	r3, [r3, #32]
 800276a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	69db      	ldr	r3, [r3, #28]
 8002776:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800277e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	f023 0303 	bic.w	r3, r3, #3
 8002786:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	68fa      	ldr	r2, [r7, #12]
 800278e:	4313      	orrs	r3, r2
 8002790:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002792:	697b      	ldr	r3, [r7, #20]
 8002794:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002798:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	689b      	ldr	r3, [r3, #8]
 800279e:	021b      	lsls	r3, r3, #8
 80027a0:	697a      	ldr	r2, [r7, #20]
 80027a2:	4313      	orrs	r3, r2
 80027a4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	4a1d      	ldr	r2, [pc, #116]	; (8002820 <TIM_OC3_SetConfig+0xd0>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d10d      	bne.n	80027ca <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80027ae:	697b      	ldr	r3, [r7, #20]
 80027b0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80027b4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	68db      	ldr	r3, [r3, #12]
 80027ba:	021b      	lsls	r3, r3, #8
 80027bc:	697a      	ldr	r2, [r7, #20]
 80027be:	4313      	orrs	r3, r2
 80027c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80027c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	4a14      	ldr	r2, [pc, #80]	; (8002820 <TIM_OC3_SetConfig+0xd0>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d113      	bne.n	80027fa <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80027d2:	693b      	ldr	r3, [r7, #16]
 80027d4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80027d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80027da:	693b      	ldr	r3, [r7, #16]
 80027dc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80027e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	695b      	ldr	r3, [r3, #20]
 80027e6:	011b      	lsls	r3, r3, #4
 80027e8:	693a      	ldr	r2, [r7, #16]
 80027ea:	4313      	orrs	r3, r2
 80027ec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	699b      	ldr	r3, [r3, #24]
 80027f2:	011b      	lsls	r3, r3, #4
 80027f4:	693a      	ldr	r2, [r7, #16]
 80027f6:	4313      	orrs	r3, r2
 80027f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	693a      	ldr	r2, [r7, #16]
 80027fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	68fa      	ldr	r2, [r7, #12]
 8002804:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	685a      	ldr	r2, [r3, #4]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	697a      	ldr	r2, [r7, #20]
 8002812:	621a      	str	r2, [r3, #32]
}
 8002814:	bf00      	nop
 8002816:	371c      	adds	r7, #28
 8002818:	46bd      	mov	sp, r7
 800281a:	bc80      	pop	{r7}
 800281c:	4770      	bx	lr
 800281e:	bf00      	nop
 8002820:	40012c00 	.word	0x40012c00

08002824 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002824:	b480      	push	{r7}
 8002826:	b087      	sub	sp, #28
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
 800282c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6a1b      	ldr	r3, [r3, #32]
 8002832:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6a1b      	ldr	r3, [r3, #32]
 800283e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	69db      	ldr	r3, [r3, #28]
 800284a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002852:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800285a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	021b      	lsls	r3, r3, #8
 8002862:	68fa      	ldr	r2, [r7, #12]
 8002864:	4313      	orrs	r3, r2
 8002866:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002868:	693b      	ldr	r3, [r7, #16]
 800286a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800286e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	689b      	ldr	r3, [r3, #8]
 8002874:	031b      	lsls	r3, r3, #12
 8002876:	693a      	ldr	r2, [r7, #16]
 8002878:	4313      	orrs	r3, r2
 800287a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	4a0f      	ldr	r2, [pc, #60]	; (80028bc <TIM_OC4_SetConfig+0x98>)
 8002880:	4293      	cmp	r3, r2
 8002882:	d109      	bne.n	8002898 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002884:	697b      	ldr	r3, [r7, #20]
 8002886:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800288a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	695b      	ldr	r3, [r3, #20]
 8002890:	019b      	lsls	r3, r3, #6
 8002892:	697a      	ldr	r2, [r7, #20]
 8002894:	4313      	orrs	r3, r2
 8002896:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	697a      	ldr	r2, [r7, #20]
 800289c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	68fa      	ldr	r2, [r7, #12]
 80028a2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	685a      	ldr	r2, [r3, #4]
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	693a      	ldr	r2, [r7, #16]
 80028b0:	621a      	str	r2, [r3, #32]
}
 80028b2:	bf00      	nop
 80028b4:	371c      	adds	r7, #28
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bc80      	pop	{r7}
 80028ba:	4770      	bx	lr
 80028bc:	40012c00 	.word	0x40012c00

080028c0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b087      	sub	sp, #28
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	60f8      	str	r0, [r7, #12]
 80028c8:	60b9      	str	r1, [r7, #8]
 80028ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	6a1b      	ldr	r3, [r3, #32]
 80028d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	6a1b      	ldr	r3, [r3, #32]
 80028d6:	f023 0201 	bic.w	r2, r3, #1
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	699b      	ldr	r3, [r3, #24]
 80028e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80028e4:	693b      	ldr	r3, [r7, #16]
 80028e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80028ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	011b      	lsls	r3, r3, #4
 80028f0:	693a      	ldr	r2, [r7, #16]
 80028f2:	4313      	orrs	r3, r2
 80028f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80028f6:	697b      	ldr	r3, [r7, #20]
 80028f8:	f023 030a 	bic.w	r3, r3, #10
 80028fc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80028fe:	697a      	ldr	r2, [r7, #20]
 8002900:	68bb      	ldr	r3, [r7, #8]
 8002902:	4313      	orrs	r3, r2
 8002904:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	693a      	ldr	r2, [r7, #16]
 800290a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	697a      	ldr	r2, [r7, #20]
 8002910:	621a      	str	r2, [r3, #32]
}
 8002912:	bf00      	nop
 8002914:	371c      	adds	r7, #28
 8002916:	46bd      	mov	sp, r7
 8002918:	bc80      	pop	{r7}
 800291a:	4770      	bx	lr

0800291c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800291c:	b480      	push	{r7}
 800291e:	b087      	sub	sp, #28
 8002920:	af00      	add	r7, sp, #0
 8002922:	60f8      	str	r0, [r7, #12]
 8002924:	60b9      	str	r1, [r7, #8]
 8002926:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	6a1b      	ldr	r3, [r3, #32]
 800292c:	f023 0210 	bic.w	r2, r3, #16
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	699b      	ldr	r3, [r3, #24]
 8002938:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	6a1b      	ldr	r3, [r3, #32]
 800293e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002946:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	031b      	lsls	r3, r3, #12
 800294c:	697a      	ldr	r2, [r7, #20]
 800294e:	4313      	orrs	r3, r2
 8002950:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002952:	693b      	ldr	r3, [r7, #16]
 8002954:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002958:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800295a:	68bb      	ldr	r3, [r7, #8]
 800295c:	011b      	lsls	r3, r3, #4
 800295e:	693a      	ldr	r2, [r7, #16]
 8002960:	4313      	orrs	r3, r2
 8002962:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	697a      	ldr	r2, [r7, #20]
 8002968:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	693a      	ldr	r2, [r7, #16]
 800296e:	621a      	str	r2, [r3, #32]
}
 8002970:	bf00      	nop
 8002972:	371c      	adds	r7, #28
 8002974:	46bd      	mov	sp, r7
 8002976:	bc80      	pop	{r7}
 8002978:	4770      	bx	lr

0800297a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800297a:	b480      	push	{r7}
 800297c:	b085      	sub	sp, #20
 800297e:	af00      	add	r7, sp, #0
 8002980:	6078      	str	r0, [r7, #4]
 8002982:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	689b      	ldr	r3, [r3, #8]
 8002988:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002990:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002992:	683a      	ldr	r2, [r7, #0]
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	4313      	orrs	r3, r2
 8002998:	f043 0307 	orr.w	r3, r3, #7
 800299c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	68fa      	ldr	r2, [r7, #12]
 80029a2:	609a      	str	r2, [r3, #8]
}
 80029a4:	bf00      	nop
 80029a6:	3714      	adds	r7, #20
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bc80      	pop	{r7}
 80029ac:	4770      	bx	lr

080029ae <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80029ae:	b480      	push	{r7}
 80029b0:	b087      	sub	sp, #28
 80029b2:	af00      	add	r7, sp, #0
 80029b4:	60f8      	str	r0, [r7, #12]
 80029b6:	60b9      	str	r1, [r7, #8]
 80029b8:	607a      	str	r2, [r7, #4]
 80029ba:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	689b      	ldr	r3, [r3, #8]
 80029c0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80029c2:	697b      	ldr	r3, [r7, #20]
 80029c4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80029c8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	021a      	lsls	r2, r3, #8
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	431a      	orrs	r2, r3
 80029d2:	68bb      	ldr	r3, [r7, #8]
 80029d4:	4313      	orrs	r3, r2
 80029d6:	697a      	ldr	r2, [r7, #20]
 80029d8:	4313      	orrs	r3, r2
 80029da:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	697a      	ldr	r2, [r7, #20]
 80029e0:	609a      	str	r2, [r3, #8]
}
 80029e2:	bf00      	nop
 80029e4:	371c      	adds	r7, #28
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bc80      	pop	{r7}
 80029ea:	4770      	bx	lr

080029ec <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b084      	sub	sp, #16
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
 80029f4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d109      	bne.n	8002a10 <HAL_TIMEx_PWMN_Start+0x24>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002a02:	b2db      	uxtb	r3, r3
 8002a04:	2b01      	cmp	r3, #1
 8002a06:	bf14      	ite	ne
 8002a08:	2301      	movne	r3, #1
 8002a0a:	2300      	moveq	r3, #0
 8002a0c:	b2db      	uxtb	r3, r3
 8002a0e:	e022      	b.n	8002a56 <HAL_TIMEx_PWMN_Start+0x6a>
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	2b04      	cmp	r3, #4
 8002a14:	d109      	bne.n	8002a2a <HAL_TIMEx_PWMN_Start+0x3e>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002a1c:	b2db      	uxtb	r3, r3
 8002a1e:	2b01      	cmp	r3, #1
 8002a20:	bf14      	ite	ne
 8002a22:	2301      	movne	r3, #1
 8002a24:	2300      	moveq	r3, #0
 8002a26:	b2db      	uxtb	r3, r3
 8002a28:	e015      	b.n	8002a56 <HAL_TIMEx_PWMN_Start+0x6a>
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	2b08      	cmp	r3, #8
 8002a2e:	d109      	bne.n	8002a44 <HAL_TIMEx_PWMN_Start+0x58>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002a36:	b2db      	uxtb	r3, r3
 8002a38:	2b01      	cmp	r3, #1
 8002a3a:	bf14      	ite	ne
 8002a3c:	2301      	movne	r3, #1
 8002a3e:	2300      	moveq	r3, #0
 8002a40:	b2db      	uxtb	r3, r3
 8002a42:	e008      	b.n	8002a56 <HAL_TIMEx_PWMN_Start+0x6a>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002a4a:	b2db      	uxtb	r3, r3
 8002a4c:	2b01      	cmp	r3, #1
 8002a4e:	bf14      	ite	ne
 8002a50:	2301      	movne	r3, #1
 8002a52:	2300      	moveq	r3, #0
 8002a54:	b2db      	uxtb	r3, r3
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d001      	beq.n	8002a5e <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	e059      	b.n	8002b12 <HAL_TIMEx_PWMN_Start+0x126>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d104      	bne.n	8002a6e <HAL_TIMEx_PWMN_Start+0x82>
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2202      	movs	r2, #2
 8002a68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002a6c:	e013      	b.n	8002a96 <HAL_TIMEx_PWMN_Start+0xaa>
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	2b04      	cmp	r3, #4
 8002a72:	d104      	bne.n	8002a7e <HAL_TIMEx_PWMN_Start+0x92>
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2202      	movs	r2, #2
 8002a78:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002a7c:	e00b      	b.n	8002a96 <HAL_TIMEx_PWMN_Start+0xaa>
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	2b08      	cmp	r3, #8
 8002a82:	d104      	bne.n	8002a8e <HAL_TIMEx_PWMN_Start+0xa2>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2202      	movs	r2, #2
 8002a88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a8c:	e003      	b.n	8002a96 <HAL_TIMEx_PWMN_Start+0xaa>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2202      	movs	r2, #2
 8002a92:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	2204      	movs	r2, #4
 8002a9c:	6839      	ldr	r1, [r7, #0]
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f000 f8b2 	bl	8002c08 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002ab2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a18      	ldr	r2, [pc, #96]	; (8002b1c <HAL_TIMEx_PWMN_Start+0x130>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d00e      	beq.n	8002adc <HAL_TIMEx_PWMN_Start+0xf0>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ac6:	d009      	beq.n	8002adc <HAL_TIMEx_PWMN_Start+0xf0>
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a14      	ldr	r2, [pc, #80]	; (8002b20 <HAL_TIMEx_PWMN_Start+0x134>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d004      	beq.n	8002adc <HAL_TIMEx_PWMN_Start+0xf0>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4a13      	ldr	r2, [pc, #76]	; (8002b24 <HAL_TIMEx_PWMN_Start+0x138>)
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d111      	bne.n	8002b00 <HAL_TIMEx_PWMN_Start+0x114>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	689b      	ldr	r3, [r3, #8]
 8002ae2:	f003 0307 	and.w	r3, r3, #7
 8002ae6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	2b06      	cmp	r3, #6
 8002aec:	d010      	beq.n	8002b10 <HAL_TIMEx_PWMN_Start+0x124>
    {
      __HAL_TIM_ENABLE(htim);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	681a      	ldr	r2, [r3, #0]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f042 0201 	orr.w	r2, r2, #1
 8002afc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002afe:	e007      	b.n	8002b10 <HAL_TIMEx_PWMN_Start+0x124>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	681a      	ldr	r2, [r3, #0]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f042 0201 	orr.w	r2, r2, #1
 8002b0e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002b10:	2300      	movs	r3, #0
}
 8002b12:	4618      	mov	r0, r3
 8002b14:	3710      	adds	r7, #16
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}
 8002b1a:	bf00      	nop
 8002b1c:	40012c00 	.word	0x40012c00
 8002b20:	40000400 	.word	0x40000400
 8002b24:	40000800 	.word	0x40000800

08002b28 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	b085      	sub	sp, #20
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
 8002b30:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b38:	2b01      	cmp	r3, #1
 8002b3a:	d101      	bne.n	8002b40 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002b3c:	2302      	movs	r3, #2
 8002b3e:	e046      	b.n	8002bce <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2201      	movs	r2, #1
 8002b44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2202      	movs	r2, #2
 8002b4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	689b      	ldr	r3, [r3, #8]
 8002b5e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b66:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	68fa      	ldr	r2, [r7, #12]
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	68fa      	ldr	r2, [r7, #12]
 8002b78:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4a16      	ldr	r2, [pc, #88]	; (8002bd8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d00e      	beq.n	8002ba2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b8c:	d009      	beq.n	8002ba2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4a12      	ldr	r2, [pc, #72]	; (8002bdc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d004      	beq.n	8002ba2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a10      	ldr	r2, [pc, #64]	; (8002be0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d10c      	bne.n	8002bbc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002ba2:	68bb      	ldr	r3, [r7, #8]
 8002ba4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002ba8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	68ba      	ldr	r2, [r7, #8]
 8002bb0:	4313      	orrs	r3, r2
 8002bb2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	68ba      	ldr	r2, [r7, #8]
 8002bba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2201      	movs	r2, #1
 8002bc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002bcc:	2300      	movs	r3, #0
}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	3714      	adds	r7, #20
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bc80      	pop	{r7}
 8002bd6:	4770      	bx	lr
 8002bd8:	40012c00 	.word	0x40012c00
 8002bdc:	40000400 	.word	0x40000400
 8002be0:	40000800 	.word	0x40000800

08002be4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002be4:	b480      	push	{r7}
 8002be6:	b083      	sub	sp, #12
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002bec:	bf00      	nop
 8002bee:	370c      	adds	r7, #12
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bc80      	pop	{r7}
 8002bf4:	4770      	bx	lr

08002bf6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002bf6:	b480      	push	{r7}
 8002bf8:	b083      	sub	sp, #12
 8002bfa:	af00      	add	r7, sp, #0
 8002bfc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002bfe:	bf00      	nop
 8002c00:	370c      	adds	r7, #12
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bc80      	pop	{r7}
 8002c06:	4770      	bx	lr

08002c08 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b087      	sub	sp, #28
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	60f8      	str	r0, [r7, #12]
 8002c10:	60b9      	str	r1, [r7, #8]
 8002c12:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002c14:	68bb      	ldr	r3, [r7, #8]
 8002c16:	f003 031f 	and.w	r3, r3, #31
 8002c1a:	2204      	movs	r2, #4
 8002c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c20:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	6a1a      	ldr	r2, [r3, #32]
 8002c26:	697b      	ldr	r3, [r7, #20]
 8002c28:	43db      	mvns	r3, r3
 8002c2a:	401a      	ands	r2, r3
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	6a1a      	ldr	r2, [r3, #32]
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	f003 031f 	and.w	r3, r3, #31
 8002c3a:	6879      	ldr	r1, [r7, #4]
 8002c3c:	fa01 f303 	lsl.w	r3, r1, r3
 8002c40:	431a      	orrs	r2, r3
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	621a      	str	r2, [r3, #32]
}
 8002c46:	bf00      	nop
 8002c48:	371c      	adds	r7, #28
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bc80      	pop	{r7}
 8002c4e:	4770      	bx	lr

08002c50 <__libc_init_array>:
 8002c50:	b570      	push	{r4, r5, r6, lr}
 8002c52:	2600      	movs	r6, #0
 8002c54:	4d0c      	ldr	r5, [pc, #48]	; (8002c88 <__libc_init_array+0x38>)
 8002c56:	4c0d      	ldr	r4, [pc, #52]	; (8002c8c <__libc_init_array+0x3c>)
 8002c58:	1b64      	subs	r4, r4, r5
 8002c5a:	10a4      	asrs	r4, r4, #2
 8002c5c:	42a6      	cmp	r6, r4
 8002c5e:	d109      	bne.n	8002c74 <__libc_init_array+0x24>
 8002c60:	f000 f822 	bl	8002ca8 <_init>
 8002c64:	2600      	movs	r6, #0
 8002c66:	4d0a      	ldr	r5, [pc, #40]	; (8002c90 <__libc_init_array+0x40>)
 8002c68:	4c0a      	ldr	r4, [pc, #40]	; (8002c94 <__libc_init_array+0x44>)
 8002c6a:	1b64      	subs	r4, r4, r5
 8002c6c:	10a4      	asrs	r4, r4, #2
 8002c6e:	42a6      	cmp	r6, r4
 8002c70:	d105      	bne.n	8002c7e <__libc_init_array+0x2e>
 8002c72:	bd70      	pop	{r4, r5, r6, pc}
 8002c74:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c78:	4798      	blx	r3
 8002c7a:	3601      	adds	r6, #1
 8002c7c:	e7ee      	b.n	8002c5c <__libc_init_array+0xc>
 8002c7e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c82:	4798      	blx	r3
 8002c84:	3601      	adds	r6, #1
 8002c86:	e7f2      	b.n	8002c6e <__libc_init_array+0x1e>
 8002c88:	08002ce0 	.word	0x08002ce0
 8002c8c:	08002ce0 	.word	0x08002ce0
 8002c90:	08002ce0 	.word	0x08002ce0
 8002c94:	08002ce4 	.word	0x08002ce4

08002c98 <memset>:
 8002c98:	4603      	mov	r3, r0
 8002c9a:	4402      	add	r2, r0
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d100      	bne.n	8002ca2 <memset+0xa>
 8002ca0:	4770      	bx	lr
 8002ca2:	f803 1b01 	strb.w	r1, [r3], #1
 8002ca6:	e7f9      	b.n	8002c9c <memset+0x4>

08002ca8 <_init>:
 8002ca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002caa:	bf00      	nop
 8002cac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002cae:	bc08      	pop	{r3}
 8002cb0:	469e      	mov	lr, r3
 8002cb2:	4770      	bx	lr

08002cb4 <_fini>:
 8002cb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cb6:	bf00      	nop
 8002cb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002cba:	bc08      	pop	{r3}
 8002cbc:	469e      	mov	lr, r3
 8002cbe:	4770      	bx	lr
